#!/usr/bin/env bash
# neeasade's bspwmrc
# may take one bool arg: gaps or ungapped

set -a

# if none set, keep whatever is open.
gapped=$1
[ -z "$gapped" ] && gapped=$(iif "! [ $(bspc config window_gap) -le 0 ]")

PATH=$PATH:$HOME/.wm/scripts/visual

relaunch_panel=$(iif "systemctl --user status panel")

bspc config border_width {{b_border_width}}
bspc config split_ratio  {{b_split_ratio}}

bspc config normal_border_color   "#{{b_normal_border_color}}"
bspc config active_border_color   "#{{b_active_border_color}}"
bspc config focused_border_color  "#{{b_focused_border_color}}"
bspc config presel_feedback_color "#{{b_presel_feedback_color}}"

bspc config focus_follows_pointer     true
bspc config ignore_ewmh_focus         true
bspc config remove_unplugged_monitors true
bspc config remove_disabled_monitors  true
bspc config merge_overlapping_monitors  true

bspc config pointer_modifier mod4
bspc config removal_adjustment false

# external rules
bspc config external_rules_command "$(which external_rules.sh)"

# to gap or not to gap
bspc config window_gap $(iif $gapped {{b_window_gap}} -{{b_border_width}})

side_padding=$(iif $gapped 0 {{b_border_width}})
panel_padding=$(iif $relaunch_panel "{{p_height}}+{{p_gap}}" 0)

bspc config {{p_position}}_padding $((side_padding + panel_padding))

for side in right {{{iif "[ \"$p_position\" = \"top\" ]" bottom top}}} left; do
    bspc config ${side}_padding $side_padding
done

# bspc config borderless_monocle $(iif "! $gapped")
bspc config borderless_monocle true
bspc config single_monocle true

# multihead option is the custom_monocle script
mon_width=$(bspc query -T -m | jq .rectangle.width)
window_width=$(echo {{b_monocle_window_percent}} \* $mon_width | bc -l)
monocle_pad_width=$(echo "($mon_width - $window_width)/2" | bc -l)
bspc config left_monocle_padding $monocle_pad_width
bspc config right_monocle_padding $monocle_pad_width

# declare desktops per monitor
for monitor in $(bspc query -M); do
    bspc monitor $monitor -d {{b_desktop_names}}
done

if $relaunch_panel; then
    systemctl --user restart panel
fi

for visual in $HOME/.wm/scripts/visual/*; do
    pkill -f "$visual" 2>/dev/null
done

# extensions may be defined in themes here:
{{b_bspwmrc_extend}}

# bspc rule -a Emacs state=tiled
# bspc rule -a Emacs-27.0.91 state=tiled
# bspc rule -a Emacs-27.1 state=tiled
# bspc rule -a Emacs-27.0.90 state=tiled

# initial wm startup actions ($xstart set in xinitrc)
if [ $(( $(date +%s) - ${xstart:-0} )) -lt 2 ]; then
    setsid $HOME/.wm/startup.sh &
    panelt
fi
