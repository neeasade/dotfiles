# -*- mode: python -*-

import os
import socket
from qutebrowser.config.configfiles import ConfigAPI  # noqa: F401
from qutebrowser.config.config import ConfigContainer  # noqa: F401

config = config  # type: ConfigAPI # noqa: F821
c = c  # type: ConfigContainer # noqa: F821

# https://github.com/noctuid/dotfiles/blob/master/browsing/.config/qutebrowser/config.py
def nmap(key, command):
    """Bind key to command in normal mode."""
    config.bind(key, command, mode='normal')

initial_start = c.tabs.background == False

if initial_start:
    # ui
    c.completion.scrollbar.width = 10
    c.tabs.position = 'top'
    c.tabs.show = 'multiple'
    c.tabs.indicator.width = 0
    c.tabs.title.format = '{current_title}'
    c.tabs.title.alignment = 'center'
    c.downloads.position = 'bottom'
    c.tabs.favicons.show = 'never'

    # behavior
    c.downloads.location.prompt = False
    c.hints.scatter = False
    c.url.searchengines = {'DEFAULT': 'https://google.com/search?q={}' }
    c.input.insert_mode.auto_load = True
    c.input.insert_mode.auto_leave = False
    c.tabs.background = True

    if 'EDITOR' in os.environ:
        c.editor.command = [os.environ['EDITOR'] + ' "{}"']

    if 'bridge' in socket.gethostname():
        # c.editor.command = ['/run/current-system/sw/bin/emacsclient', '-c', '+{line}:{column}', '{file}']
        c.editor.command = ['{{{which qutebrowser-edit}}}', '-l{line}', '-c{column}', '-f{file}']

    c.auto_save.session = True

    nmap('b', 'set-cmd-text --space :buffer')

    # colemak
    c.hints.chars = 'arstgkneio'
    nmap('n', 'scroll-page 0 0.2')
    nmap('e', 'scroll-page 0 -0.2')
    nmap('N', 'tab-next')
    nmap('E', 'tab-prev')
    nmap('k', 'search-next')
    nmap('K', 'search-prev')


# mustache templated from current theme
theme = {
    'panel': {
        'height': {{p_height}},
    },

    'fonts': {
        'tabbar': '{{q_tab_font}}',
        'completion': '{{q_tab_font}}',
        'completion_size': {{q_tab_fontsize_small}},
        'tab_bold': {{q_tab_bold}},
        'tab_size': {{q_tab_fontsize}},
        'status_size': {{q_tab_fontsize_small}},
    },

    'colors': {
        'bg': {
            'normal': '#{{p_bg_normal}}',
            'active': '#{{p_bg_active}}',
            'inactive': '#{{p_bg_inactive}}',
        },

        'fg': {
            'normal': '#{{p_fg_normal}}',
            'active': '#{{p_fg_active}}',
            'inactive': '#{{p_fg_inactive}}',
            'match': '#{{p_icon}}', # completion and hints
        },
    }
}

# colors
colors = theme['colors']
# this is only worth it if it's a light color, todo: use css instead
# config.set('colors.webpage.bg', "#{{background}}");

def setToBG(colortype, target):
    config.set('colors.' + target, colors['bg'][colortype])

def setToFG(colortype, target):
    config.set('colors.' + target, colors['fg'][colortype])

def colorSync(colortype, setting):
    if setting.endswith('.fg'):
        setToFG(colortype, setting)
    elif setting.endswith('.bg'):
        setToBG(colortype, setting)
    elif setting.endswith('.top') or setting.endswith('.bottom'):
        setToFG(colortype, setting)
    else:
        setToFG(colortype, setting + '.fg')
        setToBG(colortype, setting + '.bg')

targets = {
    'normal' : [
        'statusbar.normal',
        'statusbar.command',
        'statusbar.url.success.http.fg',
        'statusbar.url.success.https.fg',
        'hints',
        'downloads.bar.bg',
        'completion.category',

        'tabs.even',
        'tabs.odd',
    ],

    'active' : [
        'tabs.selected.even',
        'tabs.selected.odd',
        'statusbar.insert',
        'downloads.stop',
        'prompts',
        'messages.warning',
        'messages.error',
        'statusbar.url.hover.fg',
        'completion.item.selected',

        'completion.category.border.top',
        'completion.category.border.bottom',

        'completion.item.selected.border.top',
        'completion.item.selected.border.bottom',
    ],

    'inactive': [
        'completion.scrollbar',
        'downloads.start',
        'messages.info',
        'completion.fg',
        'completion.odd.bg',
        'completion.even.bg',
    ],

    'match': [
        'completion.match.fg',
        'hints.match.fg',
    ]
}

for colortype in targets:
    for target in targets[colortype]:
        colorSync(colortype, target)

setToFG('active', 'statusbar.progress.bg')

config.set('hints.border', '1px solid ' + colors['fg']['normal'])

# tabbar
def makePadding(top, bottom, left, right):
    return { 'top': top, 'bottom': bottom, 'left': left , 'right': right }

# TODO improve this logic

# assume height of font is ~10px, pad top by half match panel height
# txth reference
# ./txth -f "xft:${font_name}:style=Regular" -s $font_size "asdf"

surround = round((theme['panel']['height'] - 10) / 2)
c.tabs.padding = makePadding(surround, surround, 8, 8)
c.tabs.indicator.padding = makePadding(0, 0, 0, 0)

# fonts
fonts = theme['fonts']
c.fonts.monospace = fonts['tabbar']

def GetSize(fontType):
    return str(fonts[fontType + '_size']) + 'pt '

tabFont = GetSize('tab') + fonts['tabbar']

if fonts['tab_bold']:
    tabFont = 'bold {0}'.format(tabFont)

c.fonts.tabs = tabFont
c.fonts.completion.entry = GetSize('completion') + fonts['completion']
c.fonts.statusbar = GetSize('completion') + fonts['completion']

# userscripts
# this allows some extra control across platforms, like wrapping bash scripts on windows 
userscripts = [
{
        'name': 'goto_url_note',
        'bind': 'gn',
        'script':
        """#!/bin/sh
popup_window.sh -r
emacsclient -c --no-wait
elisp "(ns/urlnote-jump \\"${QUTE_URL}\\")"
        """
    },
    {
        'name': 'show_url',
        'bind': 'su',
        'script': """#!/bin/sh
notify-send "$QUTE_URL"
        """
    }
]

if os.name == 'nt':
    userscript_location = os.environ['APPDATA'] + '\\qutebrowser\\data\\userscripts\\'
else:
    userscript_location = os.environ['HOME'] + "/.local/share/qutebrowser/userscripts/"

if not os.path.exists(userscript_location):
    os.makedirs(userscript_location)

def write_file(file, content):
    with open(file, 'w') as fh:
        fh.write(content)

def write_userscript(location, content):
    write_file(location, content)

# todo: make it executable
for userscript in userscripts:
    script_file = userscript_location + userscript['name']
    write_file(script_file, userscript['script'])
    nmap(userscript['bind'], 'spawn --userscript ' + userscript['name'])
