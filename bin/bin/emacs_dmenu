#!/usr/bin/env elisp
;; elisp-eval: read_stdin=true
;; dmenu in emacs
;; takes one arg, the prompt string
;; style/placement is handled by popup_window.sh

(defun ns/dmenu-popup ()
  (let* ((prompt (ns/let-script-args (prompt-string) prompt-string))
	 (existing-frame
	  (->> (frame-list)
	       (-filter (fn (string= "emacs_dmenu_frame" (frame-parameter  <> 'name))))
	       (first)))

	 (target-frame
	  (if existing-frame
	      (progn (sh "popup_window.sh -w %s -n" (frame-parameter existing-frame 'outer-window-id))
		     existing-frame)
	    (progn (sh "popup_window.sh -r")
		   (make-frame '((minibuffer . only) (name . "emacs_dmenu_frame"))))))

	 (_ (select-frame-set-input-focus target-frame))

	 ;; do the thing
	 (option (condition-case ()
		     (cl-letf (((symbol-function 'ns/set-vertico-count)
				(fn (setq vertico-count (frame-height)))))
		       (ns/pick (concat prompt " ") (->> *stdin-file* f-read (s-split "\n"))))
		   ;; if we quit just return nothing
		   (quit nil))))

    (sh "bspc node %s -g hidden=true"
	(frame-parameter target-frame 'outer-window-id))

    option))

(defun ns/dmenu-inplace ()
  (let* ((prompt (ns/let-script-args (prompt-string) prompt-string)))
    (condition-case ()
	(ns/pick (concat prompt " ") (->> *stdin-file* f-read (s-split "\n")))
      ;; if we quit out of the ivy-read just return nothing
      (quit nil))))

(if ns/enable-home-p
    (ns/dmenu-popup)
  (ns/dmenu-inplace))
