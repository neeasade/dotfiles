#!/bin/sh
# i3 ipc convienence wrapper

if [ -t 1 ]; then
    echo ">> i3c $*"
fi

live_conf=false
if [ "$1" = "-c" ]; then
    live_conf=true
    shift
fi

if [ -z "$WAYLAND_DISPLAY" ]; then
    client=i3-msg
    if $live_conf; then
	if [ "$1" = "bindsym" ]; then
	    echo "bindsym live reload not implemented"
	else
	    temp=$(mktemp)
	    i3-msg -t get_config | sed "s/$1 $2.*//" >$temp
	    echo >>$temp
	    echo "$@" >>$temp
	    mv $temp "${home}/.config/i3/config"
	    i3-msg reload
	    # broken
	    i3-msg gaps inner all set $(theme getval b_window_gap)
	fi

	exit 0
    fi
else
    client=swaymsg
fi

send() {
    $client "$@"
    exit $?
}

# note: to tell floating -- "floating" user_on vs user_off
# to tell fullscreen screen: # "fullscreen_mode": 1

get_con() { # get focused container
    send -t get_tree| jq '[recurse(.[]?) | objects | select(.focused==true)][0]'
}

get_wids() { # get all wids
    i3-msg -t get_tree| jq '[recurse(.[]?) | objects | select(.window!=null)]| .[] | .window'
}

get_wids_in_dtop() { # get all wids
    i3-msg -t get_tree| jq '[recurse(.[]?) | objects | select(.window!=null)]| .[] | .id'
}

# todo: subscription to sub event types
subscribe() { # subscribe to events
    # <kind> <sub kinds>
    # workspace
    # output
    # window new close focus title fullscreen_mode move floating urgent mark
    # barconfig
    # binding
    # shutdown
    # tick

    subargs="-m"
    if [ "$1" = "once" ]; then
	subargs=""
	shift
    fi

    kind=$1
    shift
    all=false
    if [ -z "$*" ]; then
	all=true
    else
	pattern="($(echo "$*" | tr ' ' '|'))"
    fi

    swaymsg -rt subscribe $subargs "[${subs}]" | while read -r event; do
	if $all; then
	    echo "$event"
	else
	    event_change=$(echo "$event" | jq -r .change)
	    if "$event_change" | grep -q "$pattern"; then
	       echo "$event"
	    fi
	fi
    done
}

swap() {
    echo not implemented
    # see https://github.com/i3/i3/issues/3056
}

usage() {
  echo "options:"
  grep -E "^[A-Za-z_]+\(\) {.*#" "$0" | sed 's/() {//' | sort | while read -r line; do
    action=$(echo "$line" | sed 's/ #.*//')
    desc=$(echo "$line" | sed 's/.*# //')
    printf "%-10s : %s\n" "$action" "$desc"
  done
  echo "anything not matching options will be passed through to $client"
  exit 1
}

if [ -z "$*" ]; then
    usage
fi

valid=$(grep -E "^[A-Za-z_]+\(\) {.*#" "$0" | sed 's/().*//' | tr '\n' '|')

if echo "$1" | grep -qE "(${valid%?})"; then
    "$@"
else
    send "$@"
fi

if [ -t 1 ]; then
    echo
fi
