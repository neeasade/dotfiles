#!/usr/bin/env bb
;; -*- mode: clojure -*-

(require '[clojure.java.shell :as shell]
         '[clojure.string :as string]
         '[clojure.tools.cli :as cli]
         '[selmer.parser :as template]
         '[cheshire.core :as json]
         '[clojure.walk :refer [postwalk prewalk]])

(defn get-env []
  (->> (System/getenv)
       (map (fn [[k v]] {(keyword k) v}))
       (into {})))

(defn shh [cmd]
  (->> (string/split cmd #" ")
       (apply shell/sh)
       (:out)
       (string/trim)))

(defn deep-merge [a & maps]
  (if (map? a)
    (apply merge-with deep-merge a maps)
    ;; (apply merge-with deep-merge maps)
    (if (fn? a) a
        (apply merge-with deep-merge maps))))

(defn flatten-map
  "{:a {:b 1}} -> {:a.b 1}"
  ([m] (flatten-map m "."))
  ([m separator]
   (into {} (flatten-map m separator nil)))
  ([m separator pre]
   (mapcat (fn [[k v]]
             (let [prefix (if pre (str pre separator (name k)) (name k))]
               (if (map? v)
                 (flatten-map v separator prefix)
                 [[(keyword prefix) v]])))
           m)))

(defn unflatten-map
  "{:a.b 1} -> {:a {:b 1}}"
  ([m] (unflatten-map m #"\."))
  ([m separator-re]
   (reduce
    (fn [m [k v]]
      (let [keyword-path (map keyword (string/split (name k) separator-re))]
        (assoc-in m keyword-path v)))
    {} m)))

(defn index-of [coll to-find]
  (first
   (keep-indexed
    (fn [i v]
      (when (= v to-find)
        i))
    coll)))

(defn panel-format-to-lemons [format]
  ;; "a:b|c:d|e" -> [{:keys [name step end end-inner align]}]
  (let [parts (string/split format #"\|")
        all (-> format (string/split #"\||:"))
        transform (fn [part-fn align]
                    (->> (-> parts part-fn (string/split #":"))
                         (map (fn [name] {:name name
                                          :end false
                                          :end-inner false
                                          :align align
                                          :step (index-of all name)
                                          }))
                         (into [])))
        lemons-left (transform first 'left)
        lemons-center (transform second 'center)
        lemons-right (transform #(nth % 2) 'right)]
    (concat
     (-> lemons-left
         (update-in [0] assoc :end true)
         (update-in [(dec (count lemons-left))] assoc :end-inner true))
     (-> lemons-center
         (update-in [0] assoc :end-inner true)
         (update-in [(dec (count lemons-center))] assoc :end-inner true))
     (-> lemons-right (update-in [0] assoc :end-inner true)
         (update-in [(dec (count lemons-right))] assoc :end true)))))

(defn panel-color-lemons
  "give lemons: bg fg line"
  [tree lemons]
  (let [vanilla (fn [lemon]
                  (-> lemon
                      (assoc :bg "{{color.normal.background}}")
                      (assoc :fg "{{color.normal.foreground}}")
                      (assoc :line "{{color.normal.foreground}}")))]
    (map vanilla lemons)))

(defn panel-lemons-to-i3blocks [lemons]
  (let [lemon-info {:interval {
                               :network 20
                               :mail 30
                               :desktop "bspc subscribe"
                               :tags "persist"
                               :title "persist"
                               :weather 600
                               :updates 600
                               :github 120}
                    :mouse {
                            ;; lemon name
                            :mpd {:left "player.sh toggle"
                                  :right "player.sh next"
                                  :scrolldown "mpc seek -00:00:02"
                                  :scrollup "mpc seek +00:00:02"}
                            :volume {:scrollup "ponymix decrease 5"
                                     :scrolldown "ponymix increase 5"}
                            ;; :org-task {:left "elisp '(org-clock-goto)'; bspc node -f \$(xdotool search --onlyvisible --class Emacs)"
                            ;;            :right "elisp org-clock-current-task || bspc node -f \$(xdotool search --onlyvisible --class Emacs); elisp '(org-pomodoro)'"
                            ;;            }
                            }
                    }]
    (->> lemons
         (map (fn [lemon]
                (merge
                 (select-keys lemon [:bg :fg :line :step :align])
                 {:lemon (:name lemon)
                  :command (format "%s/.wm/panel/lemons/%s | season" (System/getenv "HOME") (:name lemon))
                  :lemon_end (:end lemon)
                  :lemon_end_inner (:end-inner lemon)
                  :interval (or ((-> lemon :name keyword) (:interval lemon-info))
                                5)}
                 (flatten-map
                  {:mouse ((-> lemon :name keyword) (:mouse lemon-info))}
                  "_"))))
         (map (fn [lemon]
                (->> lemon
                     (remove (comp nil? val))
                     (into {})))))))

(defn map-to-shell
  [m]
  (->> (flatten-map m "_")
       (map (fn [[k v]]
              (format "%s='%s'"
                      (-> k name (string/replace "-" "_"))
                      ;; todo: handle strings with "'"s in them
                      ;; sed "s#'#\'\\\'\'#g"
                      ;; (string/replace v "'" "\'\\\'\'")
                      v
                      )))
       (string/join "\n")))

(defn narrow [string-path m]
  (->> (string/split string-path #"\.")
       (map keyword)
       (get-in m)))

(defn promote [string-path m]
  (merge m (narrow string-path m)))

(defn str->int [str]
  (when (re-matches (re-pattern "\\d+") str)
    (read-string str)))

(defn missing-value-fn [tag context-map]
  (clojure.pprint/pprint
   (into (sorted-map)
         (flatten-map (dissoc context-map :env))))
  (throw (Exception. (str "<Missing value: " (or (:tag-value tag) (:tag-name tag)) ">"))))

(defn retain-value-fn [tag context-map]
  (format "{{%s}}" (:tag-value tag)))

(selmer.util/set-missing-value-formatter! missing-value-fn)

(defn exec-fns [tree]
  ;; call things that are functions in a tree
  (postwalk
   (fn [n]
     (if (map? n)
       (->> n
            (map (fn [[k v]]
                   {k (if (fn? v)
                        (try
                          (v tree)
                          (catch Exception _
                            ;; expected to be failed get-in tree (because of a pending fn render)
                            v))
                        v)}))
            (into {}))
       n)) tree))

(defn render-leaves-with-siblings [tree]
  (prewalk
   (fn [n]
     (if (and (map? n)
              (not-any? map? (keys n)))
       ;; sibling render pass
       (into {}
             (map (fn [[k v]]
                    {k (if (and (string? v)
                                (string/includes? v "{{"))
                         (let [
                               ;; let top level map win conflicts
                               render-conf (-> tree
                                               (merge (apply dissoc n (keys tree)))
                                               (assoc :env (get-env)))
                               render-result (string/trim (template/render v render-conf))]
                           ;; this is what allows us to make multiple passes:
                           (if (string/includes? render-result "{{")
                             v
                             render-result
                             ;; (if-let [x (str->int render-result)]
                             ;;   x
                             ;;   render-result)
                             ))
                         v)}) n))
       n)) tree))

;; theme build is:
;; resolve fn's in base-conf
;; deep-merge host themes
;; render string leaves in tree
;; remove keys ending in '-' from tree
(defn get-theme []
  (let [home? (= "erasmus" (.. java.net.InetAddress getLocalHost getHostName))
        work? (not (= "neeasade" (System/getenv "USER")))

        ;; emacs-colors
        ;; {:colors ["#F2E9E3" "#916156" "#667400" "#916156" "#2A7783" "#2A7783" "#8F5D7F" "#544B45" "#A35A29" "#916156" "#667400" "#916156" "#2A7783" "#2A7783" "#8F5D7F" "#544B45"]
        ;;  , :color {:focused {:background "#e1c5c0", :foreground "#544b45", :faded "#a35a29", :primary "#8f5d7f", :assumed "#2a7783", :alt "#916156", :strings "#667400"}, :normal {:background "#f2e9e3", :foreground "#544b45", :faded "#a35a29", :primary "#8f5d7f", :assumed "#2a7783", :alt "#916156", :strings "#667400"}, :weak {:background "#ded5d4", :foreground "#483f3e", :faded "#a93b2f", :primary "#825072", :assumed "#1d6a76", :alt "#845449", :strings "#5b6600"}, :strong {:background "#d2c9ce", :foreground "#40373c", :faded "#a1276b", :primary "#7b496b", :assumed "#15626e", :alt "#7d4d42", :strings "#545f00"}, :cursor "#2a7783"}}

        emacs-colors (let [result (shell/sh "elisp" "-t0.1" "-r" "(ns/emacs-to-theme)")]
                       (when (= 0 (:exit result))
                         (read-string (:out result))))

        colors {:colors ["#E8EBEC" "#006E96" "#007C00" "#C38418" "#0065C8" "#407EE7" "#C6007F" "#444748" "#6A6D6E" "#006E96" "#007C00" "#C38418" "#0065C8" "#407EE7" "#C6007F" "#444748"],
                :color {:focused {:background "#a4cfed", :foreground "#093553", :faded "#305b79", :primary "#ac0065", :assumed "#0053b6", :alt "#005e86", :strings "#006c00"}, :normal {:background "#e8ebec", :foreground "#444748", :faded "#6a6d6e", :primary "#c6007f", :assumed "#0065c8", :alt "#006e96", :strings "#007c00"}, :weak {:background "#d5d6d7", :foreground "#393a3b", :faded "#5f6061", :primary "#ba0073", :assumed "#005dc0", :alt "#00668e", :strings "#007400"}, :strong {:background "#ccc9ca", :foreground "#343132", :faded "#5a5758", :primary "#ac0065", :assumed "#0053b6", :alt "#005e86", :strings "#006c00"}, :cursor "#0065c8"}}

        base-conf
        {:meta
         ;; for panel _and_ compositor
         {:shadow false}

         :font (fn [_]
                 (->> {:variable {:family "Droid Sans" :size 12}
                       :mono {:family "Droid Sans Mono" :size 12}
                       :icon {:family "Font Awesome 5 Free" :size 10}
                       :panel {:family "{{font.variable.family}}"
                               :size "{{font.variable.size}}"}}
                      (map (fn [[k v]]
                             {k (assoc v
                                       :spec "{{family}}-{{size}}"
                                       :spec-space "{{family}} {{size}}")}))
                      (into {})))

         :bspwm-meta {:desktop-names "00 01 10 11"
                      :monocle-window-percent 0.52
                      :monocle-pad-width (fn [tree]
                                           (if (string/blank? (shh "which bspc"))
                                             "55"
                                             (let [percent (get-in tree [:bspwm-meta :monocle-window-percent])
                                                   mon-width (-> (shh "bspc query -T -m")
                                                                 (json/parse-string)
                                                                 (get-in ["rectangle" "width"]))
                                                   window-width (* percent mon-width)
                                                   side (int (/ (- mon-width window-width) 2))]
                                               side)))
                      :bspwmrc-extend ""}
         :bspwm {:border-width 3
                 :split-ratio 0.5
                 :normal-border-color "{{color.normal.faded}}"
                 :focused-border-color "{{color.normal.primary}}"
                 :active-border-color "{{color.normal.assumed}}"
                 :presel-feedback-color "{{color.normal.assumed}}"
                 :single-monocle true
                 :borderless-monocle false

                 ;; override this to -border width if non-gapped
                 :window-gap 10

                 ;; other
                 :focus-follows-pointer      true
                 :ignore-ewmh-focus          true
                 :remove-unplugged-monitors  true
                 :remove-disabled-monitors   true
                 :merge-overlapping-monitors true
                 :pointer-modifier "mod4"
                 :removal-adjustment false
                 :external-rules-command (fn [_] (shh "which external_rules.sh"))
                 :left-monocle-padding "{{bspwm-meta.monocle-pad-width}}"
                 :right-monocle-padding "{{bspwm-meta.monocle-pad-width}}"}
         :mkb {:bar- "-+-"
               :complete (fn [tree] (-> tree (get-in [:mkb :bar-]) (nth 0) (str)))
               :sep (fn [tree] (-> tree (get-in [:mkb :bar-]) (nth 1) (str)))
               :empty (fn [tree] (-> tree (get-in [:mkb :bar-]) (nth 2) (str)))
               :start ""
               :end  ""}
         :gtk {:theme "Raleigh"}
         ;; see: https://github.com/gnotclub/xst/blob/master/.Xresources
         :st {
              ;; :font "{{font.mono.spec}}"
              :cursorshape 2
              :cursorthickness 2
              :borderpx 0
              :depth 24}

         :shell {:prompt "$"
                 :prompt_err "!"}
         :x {:padding 4}
         :picom {:frame {:opacity 1.0}
                 :shadow {:opacity 0.4
                          :enabled false
                          :radius 1
                          :offset-x 1
                          :offset-y 1
                          :red 0.0
                          :blue 0.0
                          :green 0.0}
                 :fade {:enabled false
                        :in-step 0.1
                        :out-step 0.1}}
         :mpd (when home?
                (fn [_]
                  (if (string/includes? (shh "mount")
                                        (format "%s/usb" (System/getenv "HOME")))
                    {:music-dir "{{env.HOME}}/usb/Music"
                     :mpd-dir "{{env.HOME}}/.config/mpd_portable"}
                    {:music-dir "{{env.HOME}}/Music"
                     :mpd-dir "{{env.HOME}}/.config/mpd"})))
         :panel {:height 26
                 :format  "mpd:title|org_task:misc|volume:weather:clock"
                 :window-class (fn [tree]
                                 (if (get-in tree [:meta :shadow])
                                   "lemonbar" "noshadow"))
                 :gap 0
                 :top true
                 :lemons (when home?
                           (fn [tree]
                             (->> (get-in tree [:panel :format])
                                  (panel-format-to-lemons)
                                  (panel-color-lemons tree)
                                  (panel-lemons-to-i3blocks))))
                 }
         :qutebrowser (unflatten-map
                       {:statusbar nil
                        :tab.font.family "{{font.variable.family}}"
                        :tab.font.size "{{font.panel.size}}"
                        ;; will this work?
                        :statusbar.font.size
                        ;; "{{qutebrowser.tab.font.size}}"
                        "{{font.panel.size}}"
                        :tab.bold (fn [tree]
                                    (let [panel-font (get-in tree [:font :panel :spec])
                                          bold? (string/includes? panel-font "Bold")]
                                      (if bold? "True" "False")))
                        })
         }
        home-theme (when home?
                     (unflatten-map
                      {:THEME_NAME "test"
                       :emacs.theme "tarp-mcfay"
                       :BG_COMMAND "${HOME}/.fehbg"
                       ;; :BG_COMMAND "hsetroot -solid '{{color.focused.background}}'"
                       ;; :font.mono.family "Triplicate T4c"
                       :font.mono.family "Go Mono"
                       ;; :font.mono.family "Triplicate C4c"
                       :font.variable.family "Equity Text B"
                       ;; :font.variable.family "Equity Text A"
                       :mkb.bar- "AAH"
                       :shell.prompt "%"
                       :x.padding 5
                       :bspwm.window-gap 40
                       :bspwm-meta.monocle-window-percent 0.55
                       :bspwm-meta.bspwmrc-extend "tag_borders &\n subscription_rules &"
                       :font.mono.size 12
                       :font.variable.size 13
                       :picom.shadow.enabled "{{meta.shadow}}"}))

        work-theme (when work?
                     (unflatten-map
                      {:THEME_NAME "test"
                       :emacs.theme "tarp-mcfay"
                       :BG_COMMAND "wallmac tile '{{env.HOME}}/Downloads/mpv-shot0095.jpg'"

                       :font.mono.family "Go Mono"
                       :font.variable.family "Charter"
                       :font.mono.size 16
                       :font.variable.size 16

                       ;; :mkb.bar- ["🌳" "🌻" "🌱"]
                       ;; :mkb.bar- ["🌳" "🟦" "🌱"]
                       ;; :mkb.bar- ["⬛" "🟦" "⬜"]
                       :mkb.bar- ["⬜" "🟦" "⬛"]
                       ;; :mkb.bar- "AHH"
                       :shell.prompt "🌳"
                       :shell.prompt_err "😞"
                       :bspwm.window-gap 0
                       :x.padding 5
                       :bspwm.monocle-window-percent 0.55}))]

    ;; gross
    ;; ok so deep-merge won't merge over keys that are fns
    ;; this allows us to merge theme things that are USED in fns first
    ;; and then stomp anything that was rendered by merging again after
    (-> base-conf
        (deep-merge (or emacs-colors colors))
        (deep-merge home-theme work-theme)
        exec-fns exec-fns
        (deep-merge home-theme work-theme))))

(defn process-theme [theme-tree]
  (as-> theme-tree tree

    ;; unsure how many passes to do
    (render-leaves-with-siblings tree)
    (render-leaves-with-siblings tree)

    ;; remove keys ending in '-'
    (postwalk
     (fn [n]
       (if (map? n)
         (apply dissoc n (filter (fn [k] (string/ends-with? (pr-str k) "-"))
                                 (keys n)))
         n)) tree)))

(def cli-options
  [["-e" "--extend STRING" "override base-theme with edn -- pass a flat map {:a.b.c \"value\"}"]
   ["-h" "--help" "show the usage"]
   ["-k" "--keys" "dump the keys"]
   ["-n" "--narrow PATH" "narrow map to path"]
   ["-p" "--promote PATH" "promote path"]
   ["-q" "--query PATH" "query path"]
   ["-r" "--render-file FILE" "render a file as a template" :validate [(fn [s] true) "File doesn't exist"]] ;; todo
   ["-R" "--render STRING" "render a string as a template"]
   ["-s" "--shell" "output as shell"]])

(defn usage []
  (->> cli-options
       (map #(string/join " " (take 3 %)))
       (string/join "\n")
       (println)))

(def exit-status 0)

(defn complain-value-fn [tag context-map]
  (def exit-status 1)
  (binding [*out* *err*]
    (println (format "! no key: {{%s}}" (:tag-value tag))))
  (format "{{%s}}" (:tag-value tag)))

(defn render [template theme]
  (selmer.util/set-missing-value-formatter! complain-value-fn)
  (template/render template (assoc theme :env (get-env))))

(let [options (:options (cli/parse-opts *command-line-args* cli-options))
      theme (get-theme)
      theme (if-let [overrides (:extend options)]
              (->> (read-string overrides) (unflatten-map) (deep-merge theme))
              theme)]
  (some->> options
           (reduce
            (fn [theme [k v]]
              (condp = k
                :help (reduced (usage))
                :keys (->> theme flatten-map keys (map name) (string/join "\n"))
                :narrow (narrow v theme)
                :promote (promote v theme)
                :query (render (format "{{%s|safe}}" v) theme)
                :render (render v theme)
                :render-file (render (slurp v) theme)
                :shell (map-to-shell theme)
                theme))
            (process-theme theme))
           (println)))

(System/exit exit-status)
