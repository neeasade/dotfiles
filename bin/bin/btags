#!/usr/bin/env bb
;; note: bb is https://github.com/borkdude/babashka

;; idea: arrange tags under bspwm tree
(require '[clojure.core :as core])
(require '[clojure.string :as str])
(require '[clojure.set :as set])
(require '[clojure.java.io :as io])
(require '[clojure.java.shell :as shell])

(defn sh [command] (:out (apply shell/sh (str/split command #" "))))

;; todo: better than this
(def state-file "/tmp/btags-state")
(def state-lockfile "/tmp/btags-state-lock")

(defn wait-for-lock []
  (while (.exists (io/file state-lockfile))
    (Thread/sleep 10) ; ms
    ))

(defn update-state-focus-wid [wid]
  (when wid
    ;; (sh (format "notify-send focus_%s" wid))
    (->> wid
         (fn [_])
         (update state :focus-wid)
         (def state))))

(defn load-state []
  (def state
    (if (.exists (io/file state-file))
      (-> state-file slurp read-string)
      ;; default
      {:tags
       [{:name "code" :wids #{} :active true :color "c2c6e3"}
        {:name "net" :wids #{} :active true :color "e4815d"}
        {:name "chat" :wids #{} :active true :color "c6dc93"}
        {:name "hole" :wids #{} :active true :color "E2E3E5"}]
       :focus-wid ""
       }
      ))

  ;; note the currently focused node
  (update-state-focus-wid (-> "bspc query -N -n" sh str/trim-newline))
  )

(defn save-state []
  (->> state pr-str (spit state-file))
  (sh (format "rm %s" state-lockfile)))

(defn tag-ident-to-name [ident]
  (if (str/starts-with? ident "^")
    (:name (nth (:tags state)
                ;; bad (read-string vs parse int)
                ;; am inferring not a thing in joker
                ;; cf https://github.com/candid82/joker/blob/9dcaacdeb4d80e37ec2273a299c562dc97e6fdbc/tests/eval/tools_cli.joke#L114
                (- (read-string (apply str (rest ident)))
                   1))
           ;; we tried to use an index on a tag that doesn't exist, just use the current timestamp to name it
           ;; note: this will call date all the time to resolve the default tag name when index is used..
           (sh "date +%s"))
    ident))

(defn render-wid [wid show]
  (when (empty? (sh (format "bspc query -N -n %s.%shidden" wid (if show "\\!" ""))))
    (sh (format "bspc node %s -g hidden=%s" wid (if show "off" "on")))))

;; (println (core/format "bspc node %s -g hidden=%s" wid (if show "off" "on")))
(defn render-state []
  ;; show/hide status
  (let [show-wids
        (->> (:tags state)
             (filter #(:active %))
             (map :wids)
             (apply set/union))

        hide-wids ;; all the wids - the show-ids we just calculated
        (set/difference
         (->> (:tags state)
              (map :wids)
              (apply set/union))
         show-wids)
        ]

    (doall (map #(render-wid % true) show-wids))
    (doall (map #(render-wid % false) hide-wids))
    )

  ;; refocus who we had if they exist
  (when (and
         (not (= (:focus-wid state) ""))
         ;; (not (= (:focus-wid state)
         ;;         (-> "bspc query -N -n" sh str/trim-newline)
         ;;         ))
         )
    ;; (sh "sleep 1")
    ;; (sh (format "notify-send doing_%s" (:focus-wid state)))
    (sh "bspc config pointer_follows_focus true")
    (sh (core/format "bspc node %s -f" (:focus-wid state)))
    (sh "bspc config pointer_follows_focus false")))

(defn action-render "call to force a state render" [] (render-state))

(defn update-tags
  "update all tags with a transform function"
  [transform-func]
  (def state
    (update state :tags
            (fn [old-tags]
              (vec
               (doall
                (map transform-func old-tags)))
              ))))

(defn cleanup-state
  "cleanup state"
  []
  ;; remove killed windows from tags
  (let [all-wids (-> "bspc query -N -n .leaf" sh (str/trim-newline) (str/split #"\n") set)]
    (update-tags
     (fn [old-tag]
       (update old-tag :wids (fn [old-wids]
                               (set (filter #(contains? all-wids %) old-wids)))))))

  ;; make sure there are no duplicate tag names
  (def state
    (update state :tags
            (fn [old-tags]
              (map #(-> % second first)
                   (group-by :name old-tags)))))
  )

(defn action-set "<tag> <setting> <value> - set [name|color] value on tag"
  [tag-name setting new-value]
  (update-tags
   (fn [old-tag]
     (update old-tag (keyword setting)
             #(if (= (:name old-tag) (tag-ident-to-name tag-name))
                new-value %)))))

(defn action-add "<tag-name> <color> - create a new tag with an associated color"
  [tag-name color]
  (def state
    (update state :tags
            (fn [tags] (conj tags {:active true :name tag-name :color color :wids #{}})))))

(defn action-remove "<tag-name> - remove tag name from the tags list"
  [tag-name]
  (def state
    (update state :tags
            (fn [tags] (filter #(not (= (:name %) tag-name)) tags)))))

(defn action-toggle
  "<tags> -- toggle visibility of tags"
  [& tags]

  (defn update-active [old-tag]
    (update old-tag :active
            (fn [_] (if (contains? (set (map tag-ident-to-name tags)) (:name old-tag)) (not _) _))))

  (update-tags update-active)

  ;; if we toggled some tag and it's now active, make it the focused window
  (->> (:tags state)
       (filter (fn [old-tag] (contains? (set tags) (:name old-tag))))
       (filter #(:active %))
       (map #(update-state-focus-wid (last (:wids %))))
       doall
       ))

(defn action-focus "<tag> - focus the last wid in the tag"
  [tag]

  (let [full-tag (->> (:tags state)
                      (filter #(= (:name %) (tag-ident-to-name tag)))
                      first)
        last-wid (-> full-tag :wids last)
        ]
    (when (not (:active full-tag))
      (action-toggle tag))

    (update-state-focus-wid
     (if (= (:focus-wid state) last-wid)
       (if (> (count (:wids state)) 1)
         (nth (-> full-tag :wids) 1))
       last-wid
       ))))

(defn action-names
  "get all the tag names"
  [] (->> state :tags (map :name) (map println) doall))

(defn get-state-untagged []
  (let [all-wids (-> "bspc query -N -n .leaf.window" sh (str/trim-newline) (str/split #"\n") set)]
    all-wids
    (set/difference
     (set all-wids)
     (->> state :tags (map :wids) (apply set/union)))))

(defn action-untagged
  "list untagged wids"
  []
  (->> (get-state-untagged) (map println) doall))

(defn action-wids
  "<tags> -- get all wids in a tag or tags"
  [& tags]
  (->> (:tags state)
       ;; (contains?) is weird -- is index on seqs, no value
       ;; and on sets can be value since they are the same thing
       (filter #(contains? (set (map tag-ident-to-name tags)) (:name %)))
       (map :wids)
       (apply set/union)
       (map println) doall
       ))

(defn action-toggle-wids
  "<tag> <wids> -- toggle wids being in a tag"
  [tag & wids]
  (defn update-wids [old-tag]
    (update old-tag :wids
            (fn [old-wids]
              (if (= (tag-ident-to-name tag) (:name old-tag))
                (set/union
                 ;; existing minus toggles
                 (set/difference old-wids wids)
                 ;; new (old filter for not in new?)
                 (set (filter #(not (contains? old-wids %)) wids)))

                old-wids
                ))))

  (update-tags update-wids))

;; idea: if we toggle a tag that doesn't exist, add it
(defn action-set-tag-on-wids
  "<tag> <wids> -- set wids to be member of one tag"
  [tag & wids]
  (defn update-wids-set [old-tag]
    (update old-tag :wids
            (fn [old-wids]
              (if (= (tag-ident-to-name tag) (:name old-tag))
                (set/union old-wids (set wids))
                (set/difference old-wids (set wids))
                ))))

  ;; add tag if it doesn't exist
  (when (not (contains? (map :name (:tags state)) (tag-ident-to-name tag)))
    (action-add (tag-ident-to-name tag) "444444"))

  (update-tags update-wids-set))

;; ref: WMDVI-D-0:O00:o01:f10:f11:LM:TT:G
(defn action-state
  "print the state matching bspc subscribe format"
  []
  (defn tag-to-print-section [tag]
    (let [char (-> (:wids tag) empty? (if "f" "o"))]
      (format "%s%s"
              (if (:active tag) (str/upper-case char) char)
              (:name tag))))

  (println
   (str/join ":" (concat
                  (list (apply str (concat "WM" (-> "bspc query -M -m --names" sh str/trim-newline))))
                  (map #'tag-to-print-section (:tags state))
                  '("LT" "TT" "G")))))

(defn action-subscribe "analogous to bspc subscribe, but depends on `inotifywait`" []
  (action-state)
  (while true
    (sh (format "inotifywait -e close_write %s" state-file))
    (load-state)
    (action-state)))

(defn usage
  "generate usage from docstring of action-* functions"
  []
  (->> (ns-map *ns*)
       keys
       (map str)
       (filter #(str/starts-with? % "action-"))
       (sort)
       (map #(format "%12s: %s"
                     (subs % (count "action-"))
                     ;; so hot
                     (-> % symbol resolve meta :doc)))
       (cons "commands: ")
       (map println)
       doall
       )
  (println)
  (println "NB: <tag> in the above may be an index EG ^1 or the name of the tag")
  )

(defn action-get-tags
  "<wid> - get the tags a wid is in"
  [wid]
  (->> state :tags
       (filter #(contains? (set (:wids %)) wid))
       (map :name)
       (map println)
       doall
       ))

(defn action-state-raw "get raw edn state" []
  (-> state pr-str println))

(defn action-state-plain "get a plaintext representation of tags" []
  (->> (:tags state)
       (map #(format "%s %s %s %s"
                     (:name %)
                     (if (:active %) "true" "false")
                     (:color %)
                     (str/join " " (:wids %))))
       (map println)
       doall
       ))

(defn action--h "usage" [] (usage))

;; and.. action:
(when (not *command-line-args*) (usage))

(when *command-line-args*
  (if (contains?
       ;; stateful - focus might not be stateful really
       #{"toggle" "toggle-wids" "focus" "set" "set-tag-on-wids"}
       (first *command-line-args*))

    (do
      (wait-for-lock)
      (load-state)
      (cleanup-state)
      (apply
       (->> *command-line-args* first (concat "action-") (apply str) symbol resolve)
       (rest *command-line-args*))
      (save-state)
      (render-state)
      )

    (do
      (load-state)
      (apply (->> *command-line-args* first (concat "action-") (apply str) symbol resolve)
             (rest *command-line-args*)))))

;; calling this here means bb won't just print the last sexp value
(System/exit 0)
