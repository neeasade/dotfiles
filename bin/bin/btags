#!/usr/bin/env bb
;; -*- mode: clojure -*-
;; note: bb is https://github.com/borkdude/babashka

;; tag management for bspwm
;; windows may only have one tag

(require '[clojure.core :as core]
         '[clojure.string :as string]
         '[clojure.set :as set]
         '[clojure.java.io :as io]
         '[clojure.java.shell :as shell])

(defn sh [cmd & fstrings]
  (->> (string/split (apply format cmd fstrings) #" ")
       (apply shell/sh)
       (:out)
       (string/split-lines)))

(def state-file "/tmp/bspt-state")
(def state-lockfile "/tmp/bspt-state-lock")

(defn load-state []
  (let [default {:tags [{:name "code" :wids #{} :active? true :color "c2c6e3"}
                        {:name "net" :wids #{} :active? true :color "e4815d"}
                        {:name "chat" :wids #{} :active? true :color "c6dc93"}
                        {:name "hole" :wids #{} :active? true :color "E2E3E5"}]
                 :focus ""}
        state (if (.exists (io/file state-file))
                (-> state-file slurp read-string)
                default)]
    (assoc state :focus (first (sh "bspc query -N -n")))))

(def state (load-state))

(defn parse-tag-index [ident]
  (if (string/starts-with? ident "^")
    (dec (Integer/parseInt (subs ident 1)))
    (first (keep-indexed (fn [index t]
                           (when (= ident (:name t)) index))
                         (:tags state)))))

(defn render-state []
  (let [should-show-wids (->> (:tags state)
                              (filter :active?)
                              (map :wids)
                              (apply set/union))
        should-hide-wids (->> (:tags state)
                              (remove :active?)
                              (map :wids)
                              (apply set/union))]
    (run! (fn [wid]
            (let [show? (should-show-wids wid)]
              (sh "bspc node %s -g hidden=%s" wid
                  (if show? "off" "on"))))
          (set/union should-hide-wids should-show-wids)))

  ;; render the focus wid
  (sh "bspc config pointer_follows_focus true")
  (sh "bspc node %s -f" (:focus state))
  (sh "bspc config pointer_follows_focus false"))

(defn action-render "call to force a state render" [] (render-state))

(defn cleanup-state []
  ;; remove killed windows from tags
  (let [all-wids (sh "bspc query -N -n .leaf")
        clean-tags (map (fn [tag]
                          (assoc tag :wids (set/intersection (set all-wids) (:wids tag))))
                        (:tags state))

        ;; ensure no duplicate tag names:
        dedup-tags (->> (group-by :name clean-tags)
                        (vals)
                        (map first)
                        (into []))]
    (assoc state :tags dedup-tags)))

(defn action-set "set a setting (name|color) value on tag"
  [tag setting value]
  (assoc-in state [:tags (parse-tag-index tag) (keyword setting)] value))

(defn action-add "create a new tag with an associated color"
  [tag color]
  (let [new-tag {:active? true :name tag :color color :wids #{}}]
    (update state :tags (fn [tags] (conj tags new-tag)))))

(defn action-remove "remove tag name from the tags list"
  [tag]
  (let [tag-index (parse-tag-index tag)]
    (update state :tags
            (fn [tags]
              (concat
               (take tag-index tags)
               (drop (inc tag-index) tags))))))

(defn action-toggle
  "toggle visibility of a tag"
  [tag]
  (let [tag-index (parse-tag-index tag)
        new-state (update-in state [:tags tag-index]
                             (fn [t] (assoc t :active? (not (:active? t)))))
        newly-active? (get-in new-state [:tags tag-index :active?])]
    (if newly-active?
      (assoc new-state :focus (first (get-in state [:tags tag-index :wids])))
      new-state)))

(defn action-focus "focus the last wid in the tag"
  [tag]
  (let [wids (get-in state [:tags (parse-tag-index tag) :wids])
        ;; wids (remove #{(:focus state)} (:wids full-tag))
        wids `[~@wids ~(first wids)]
        focused-index (.indexOf wids (:focus state))
        focus-wid (if (= focused-index -1)
                    (first wids)
                    (nth wids (inc focused-index)))]

    (-> state
        (assoc-in [:tags (parse-tag-index tag) :active?] true)
        (assoc :focus focus-wid))))

(defn action-names
  "get all the tag names"
  [] (->> state :tags (map :name) (map println) doall))

(defn get-state-untagged []
  (set/difference
   (set (sh "bspc query -N -n .leaf.window"))
   (->> state :tags (map :wids) (apply set/union))))

(defn action-untagged
  "list untagged wids"
  []
  (->> (get-state-untagged) (map println) doall))

(defn action-wids
  "get all wids in a tag"
  [tag]
  (string/join "\n" (get-in state [:tags (parse-tag-index tag) :wids])))

(defn action-show-only
  "show only wids with a certain tag"
  [tag]
  (update-in state [:tags]
             (fn [old-tags]
               (map-indexed
                (fn [i t]
                  (if (= i (parse-tag-index tag))
                    (assoc t :active? true)
                    (assoc t :active? false)))
                old-tags))))

(defn action-set-tag-on-wids
  "set wids to be member of one tag"
  [tag & wids]
  ;; gross
  (let [tag-index (parse-tag-index tag)]
    (update-in state [:tags]
               (fn [old-tags]
                 (map-indexed
                  (fn [i t]
                    (if (= i tag-index)
                      (assoc t :wids (set/union (set wids) (:wids t)))
                      (assoc t :wids (set (remove (set wids) (:wids t))))))
                  old-tags)))))

(defn action-toggle-wids
  "deprecated alias for set-tag-on-wids"
  [tag & wids]
  ;; this function previously held logic for appending a tag to a wid rather than one tag per wid
  (apply action-set-tag-on-wids tag wids))

;; ref: WMDVI-D-0:O00:o01:f10:f11:LM:TT:G
(defn action-state
  "print the state matching bspc subscribe format"
  []
  (defn tag-to-print-section [tag]
    (let [char (-> (:wids tag) empty? (if "f" "o"))]
      (format "%s%s"
              (if (:active? tag) (string/upper-case char) char)
              (:name tag))))

  (println
   (string/join ":" (concat
                     (list (format "WM%s" (first (sh "bspc query -M -m --names"))))
                     (map #'tag-to-print-section (:tags state))
                     '("LT" "TT" "G")))))

(defn action-subscribe "analogous to bspc subscribe, but depends on `inotifywait`" []
  (action-state)
  (while true
    (sh "inotifywait -e close_write %s" state-file)
    (def state (load-state))
    (action-state)))

(defn usage
  "generate usage from docstring of action-* functions"
  []
  (->> (ns-map *ns*)
       keys
       (map str)
       (filter #(string/starts-with? % "action-"))
       (sort)
       (map #(format "%12s: %s%s"
                     (subs % (count "action-"))
                     ;; so hot
                     (let [args (-> % symbol resolve meta :arglists first)]
                       (if (empty? args) "" (format "%s " args)))
                     (-> % symbol resolve meta :doc)))


       (cons "commands: ")
       (run! println))
  (println)
  (println "NB: 'tag' in the above may be an index EG ^1 or the name of the tag"))

(defn action-get-tag
  "get the tag a wid is in"
  [wid]
  (->> state :tags
       (filter #(contains? (set (:wids %)) wid))
       (map :name)
       (run! println)))

(defn action-state-raw "get raw edn state" []
  (-> state pr-str println))

(defn action-state-plain "get a plaintext representation of tags" []
  (->> (conj
        (:tags state)
        {:color "000000" :name "untagged"
         ;; active value doesn't matter for untagged tags
         :active? true
         :wids (get-state-untagged)})

       (map (juxt :name :active? :color (fn [tag] (string/join " " (:wids tag)))))
       (map (partial apply format "%s %s %s %s"))
       (run! println)))

(defn action--h "usage" [] (usage))

(defn with-state
  "do a stateful action, render state after, in a sync fashion"
  [action-fn]
  (let [start (System/currentTimeMillis)]
    (while (.exists (io/file state-lockfile))
      (Thread/sleep 10)
      (when (> (- (System/currentTimeMillis) start)
               3000)
        ;; assume broken, take it
        (sh "rm %s" state-lockfile))))

  (sh "touch %s" state-lockfile)

  ;; note: action function is expected to return new state
  (let [result (action-fn)]
    ;; assume exception happened
    (when (not (nil? result))
      (def state result)
      (def state (cleanup-state))
      (->> state pr-str (spit state-file))
      (render-state))
    (sh "rm %s" state-lockfile)))

;; and.. action:
(when (not *command-line-args*) (usage))

(when *command-line-args*
  (if (contains?
       ;; stateful actions, ones needing the lock
       ;; note: focus might not be stateful really
       #{"toggle" "toggle-wids" "focus" "set" "set-tag-on-wids" "add" "remove" "show-only"}
       (first *command-line-args*))

    (with-state
      (fn []
        (try
          (apply
           (->> *command-line-args* first (concat "action-") (apply str) symbol resolve)
           (rest *command-line-args*))
          (catch Exception e
            (println (str "caught exception: \n" (ex-message e)))
            ;; todo: notify
            ;; (string/split (ex-message e))
            ))))

    (apply (->> *command-line-args* first (concat "action-") (apply str) symbol resolve)
           (rest *command-line-args*))))

;; calling this here means bb won't just print the last sexp value
(System/exit 0)
