#!/usr/bin/env joker
;; -*- mode: clojure -*-

;; a hack for cider buffer repl
(defmacro cider-nop [& contents] (when nil contents))
(cider-nop
 (do (require '[clojure.core :as core])
     (require '[clojure.string :as str])
     (require '[clojure.set :as set])
     (require '[clojure.java.io :as io])
     (require '[clojure.java.shell :as shell])

     (defn sh [command]
       (:out (apply shell/sh (str/split command #" "))))

     (def state (-> state-file slurp read-string))))

(require '[joker.os :as os])
(require '[joker.core :as core])
(require '[joker.string :as str])
(require '[joker.set :as set])
(require '[joker.io :as io])
(require '[joker.time :as time])

(defn sh [command]
  (:out (apply os/sh (str/split command #" "))))

;; todo: better than this
(def state-file "/tmp/bgroups-state")
(def state-lockfile "/tmp/bgroups-state-lock")

(defn wait-for-lock []
  (while (os/exists? state-lockfile)
    (time/sleep 10000000)))

(defn update-state-focus-wid [wid]
  (when wid
    ;; (sh (format "notify-send focus_%s" wid))
    (->> wid
         (fn [_])
         (update state :focus-wid)
         (def state))))

(defn load-state []
  (def state
    (if (os/exists? state-file)
      (-> state-file slurp read-string)
      ;; default
      {:tags
       [{:name "1" :wids #{1} :active true}
        {:name "2" :wids #{2} :active true}
        {:name "3" :wids #{} :active true}
        {:name "4" :wids #{} :active true}
        ]
       :focus-wid ""
       }
      ))

  ;; note the currently focused node
  (update-state-focus-wid (-> "bspc query -N -n" sh str/trim-newline))
  )

(defn save-state []
  (->> state pr-str (spit state-file))
  (sh (format "rm %s" state-lockfile)))

(defn render-wid [wid show]
  (when (empty? (sh (format "bspc query -N -n %s.%shidden" wid (if show "\\!" ""))))
    (sh (format "bspc node %s -g hidden=%s" wid (if show "off" "on")))))

;; (println (core/format "bspc node %s -g hidden=%s" wid (if show "off" "on")))
(defn render-state []
  ;; show/hide status
  (let [show-wids
        (->> (:tags state)
             (filter #(or (:active %)
                          (= (:name %) (:focus-tag state))))
             (map :wids)
             (apply set/union))

        hide-wids ;; all the wids - the show-ids we just calculated
        (set/difference
         (->> (:tags state)
              (map :wids)
              (apply set/union))
         show-wids)
        ]

    (doall (map #(render-wid % true) show-wids))
    (doall (map #(render-wid % false) hide-wids)))

  ;; refocus who we had if they exist
  (when (not (= (:focus-wid state) ""))
    ;; (sh "sleep 1")
    ;; (sh (format "notify-send doing_%s" (:focus-wid state)))
    (sh "bspc config pointer_follows_focus true")
    (sh (core/format "bspc node %s -f" (:focus-wid state)))
    (sh "bspc config pointer_follows_focus false")
    )
  )

(defn action-focus "focus <tag name>"
  [tag]
  (update-state-focus-wid
   (->> (:tags state)
        (filter #(= (:name %) tag))
        first :wids last)))

(defn update-tags
  "update all tags with a transform function"
  [transform-func]
  (def state
    (update state :tags
            (fn [old-tags]
              (doall
               (map transform-func old-tags))))))

(defn cleanup-state
  "remove any nonexistent wids from state"
  []
  (let [all-wids (-> "bspc query -N -n .leaf" sh (str/trim-newline) (str/split #"\n") set)]
    (update-tags
     (fn [old-tag]
       (update old-tag :wids (fn [old-wids]
                               (set (filter #(contains? all-wids %) old-wids))))))
    ))

(defn action-toggle
  "toggle <tag names> -- toggle visibility of a tag"
  [& tags]

  (defn update-active [old-tag]
    (update old-tag :active
            (fn [_] (if (contains? (set tags) (:name old-tag)) (not _) _))))

  (update-tags update-active)

  ;; if we toggled some tag and it's now active, make it the focused window
  (->> (:tags state)
       (filter (fn [old-tag] (contains? (set tags) (:name old-tag))))
       (filter #(:active %))
       (map #(update-state-focus-wid (last (:wids %))))
       doall
       ))

(defn action-names
  "get all the tag names"
  [] (->> state :tags (map :name) (map println) doall))

(defn get-state-untagged []
  (let [all-wids (-> "bspc query -N -n .leaf" sh (str/trim-newline) (str/split #"\n") set)]
    all-wids
    (set/difference
     (set all-wids)
     ;; all tagged
     (->> state :tags (map :wids) (apply set/union))
     )))

(defn action-untagged []
  (->> (get-state-untagged) (map println) doall))

(defn action-wids
  "wids <tag names> -- get all wids in a tag or tags"
  [& tags]
  (->> (:tags state)
       ;; (contains?) is weird -- is index on seqs, no value
       ;; and on sets can be value since they are the same thing
       (filter #(contains? (set tags) (:name %)))
       (map :wids)
       (apply set/union)
       (map println) doall
       ))

(defn action-toggle-wids
  "toggle <tag> <wids> -- toggle wids being in a tag"
  [tag & wids]
  (defn update-wids [old-tag]
    (update old-tag :wids
            (fn [old-wids]
              (if (= tag (:name old-tag))
                (set/union
                 ;; existing minus toggles
                 (set/difference old-wids wids)
                 ;; new (old filter for not in new?)
                 (set (filter #(not (contains? old-wids %)) wids))
                 )
                old-wids
                )))
    )

  (update-tags update-wids))

;; ref: WMDVI-D-0:O00:o01:f10:f11:LM:TT:G
(defn action-state
  "print the state matching bspc subscribe format"
  []
  (defn tag-to-print-section [tag]
    (let [char (-> (:wids tag) empty? (if "f" "o"))]
      (format "%s%s"
              (if (:active tag) (str/upper-case char) char)
              (:name tag))))

  (println
   (str/join ":" (concat
                  (list (apply str (concat "WM" (-> "bspc query -M -m --names" sh str/trim-newline))))
                  (map #'tag-to-print-section (:tags state))
                  '("LT" "TT" "G")))))

(defn action-subscribe "analogous to bspc subscribe, but depends on `inotifywait`" []
  (action-state)
  (while true
    (sh (format "inotifywait -e close_write %s" state-file))
    (load-state)
    (action-state)))

(defn usage
  "generate usage from docstring of action-* functions"
  []
  (->> (ns-map *ns*)
       keys
       (map str)
       (filter #(str/starts-with? % "action-"))
       (sort)
       (map #(format "%s: %s"
                     (subs % (count "action-"))
                     ;; so hot
                     (-> % symbol resolve meta :doc)))
       (cons "commands: ")
       (map println)
       doall
       ))

(defn action--h "usage" []
  (usage))

(when (not *command-line-args*)
  (usage))

(when *command-line-args*
  ;; we don't care about rendering+saving on state get (or subscribe)
  (if (= "state" (first *command-line-args*))
    (do (load-state)
        (cleanup-state)
        (action-state))

    (do (wait-for-lock)
        (load-state)
        (cleanup-state)
        (apply
         (->> *command-line-args* first (concat "action-") (apply str) symbol resolve)
         (rest *command-line-args*))

        ;; ugh
        (when (not (= "subscribe" (first *command-line-args*)))
          (render-state)
          (save-state)
          ))))

;; consider: smart toggle
;; if looking at a wid in a group, hide the group
;; else, show the group it it's not shown, then focus it
