#!/usr/bin/env bb
;; do things with mpd
;; a companion script to `music`
;; todo: better cue file support

;; todo idea: mpd-stats: generate stats for songs and artists
;; - print artists with n minutes of content

;; idea: artist aliases

;; idea: playlist place sync (cache and return to place in playlist)

(ns mpd-mixer
  (:require [babashka.fs :as fs]
            [clojure.java.io :as io]
            [clojure.java.shell :as shell]
            [clojure.string :as string]
            [clojure.set :as set]
            [lib.util :as util]))

(def HOME (System/getenv "HOME"))

(def cache-map
  (->> (string/split (slurp (str (util/shh "theme -q mpd.mpd-dir") "/database"))
                     #"song_begin:")
       (remove nil?)
       (remove #(= "" (string/trim %)))
       (keep (fn [song-chunk]
               (let [lines (string/split-lines song-chunk)
                     title (string/trim (first lines))
                     duration (first (filter #(string/starts-with? % "Time:") lines))
                     duration (when duration
                                (read-string (second (string/split duration #":"))))]
                 (when duration
                   {title duration}))))
       (into {})))

(defn mpc [& args]
  (let [result (apply shell/sh "mpc" args)]
    (when (and (:err result) (not (string/blank? (:err result))))
      (.println *err* (str "mpc error: " (:err result))))
    (string/split-lines (:out result))))

(defn file-hash [f]
  ;; still messing around with speed here
  (when (fs/exists? f)
    (first
     (string/split
      (:out
       (shell/sh "sha256sum" f))
      #" "))))

(defn file-hashdedup []
  (->> (mpc "playlist" "-f" "%file%")
       (map (partial str HOME "/Music/"))
       (group-by file-hash)
       (map (fn [[k v]] (first v)))
       (run! println)))

(defn remove-pairs [s]
  (reduce
   (fn [s [a b]]
     (string/replace s
                     (re-pattern (format "%s[^%s]+%s"
                                         a
                                         (str (last b))
                                         b))
                     ""))
   s
   [["【" "】"]
    ["『" "』" ]
    ["●" "●"]
    ["～" "～"]
    ["\\(" "\\)"]
    ["\\[" "\\]"]]))

(defn track-names
  ([] (track-names nil))
  ([scope] ; scope is {listall, playlist, or nil for only currently playing track}
   (->> (if scope
          (mpc scope "-f" "%artist%^%title%^%file%")
          (take 1 (mpc "-f" "%artist%^%title%^%file%")))
        (map #(string/split % #"\^"))
        (map (fn [[artist title filepath]]
               (cond
                 (and (not (string/blank? artist))
                      (not (string/blank? title))) (if (string/includes? title artist)
                                                     title
                                                     (str artist " - " title))
                 (not (string/blank? title)) title
                 :else (-> filepath
                           (fs/file-name)
                           (fs/strip-ext)))))
        (map (fn [song] (-> song
                            (remove-pairs)
                            ((fn [s]
                               (reduce (fn [sd pattern] (string/replace sd pattern " "))
                                       s
                                       [#"\-[0-9a-zA-Z_\-]{11}$"
                                        #"^[0-9]+\. "
                                        "[fF]ull [aA]lbum"
                                        " Full "
                                        "Album"
                                        #"_"
                                        #",.*$"])))
                            ;; (string/replace "＂" "\"")
                            (string/replace "|" "-")
                            (string/replace " | " "-")
                            (string/replace "⧸" "/")
                            (string/replace "--" "-")
                            (string/replace "：" " - ")
                            (string/replace #"[ ]+" " ")
                            (string/replace #"- Album" "")
                            (string/trim)
                            ((fn [s]
                               (if (and (not (Character/isLetter (last s)))
                                        (not (Character/isDigit (last s)))
                                        (= \space (first (take-last 2 s))))
                                 (string/trim (apply str (drop-last 2 s)))
                                 s)))))))))

(defn name-dedup []
  (let [position (dec (Integer/parseInt (first (mpc "-f" "%position%"))))]
    (->> (track-names "playlist")
         (map-indexed (fn [i name] [i name]))
         (group-by second)
         (keep (fn [[song pairs]]
                 (when (> (count pairs) 1)
                   (->> pairs
                        (map first)
                        (remove #(= position %))))))
         (map (fn [positions]
                ;; complexity from the current position case
                (if (= 1 (count positions))
                  positions
                  (rest positions))))
         (flatten)
         (map inc))))

(defn filepath-dedup []
  (let [position (first (mpc "-f" "%position%"))]
    (->> (mpc "playlist" "-f" "%position% %file%")
         (map #(string/split % #" " 2))
         (group-by second)
         (keep (fn [[song pairs]]
                 (when (> (count pairs) 1)
                   (->> pairs
                        (map first)
                        (remove #(= position %))))))
         (map (fn [positions]
                ;; complexity from the position position case
                (if (= 1 (count positions))
                  positions
                  (rest positions))))
         (flatten))))

(defn clear-duplicates
  ([] (clear-duplicates "manual"))
  ([op]
   (when (some #(= % op) ["artist" "playlist" "append" "restore" "now" "manual"])
     (let [duplicates (name-dedup)]
       (when-not (empty? duplicates)
         (println "clearing duplicates:" (string/join " " duplicates))
         (mpc "del" "--wait" :in (string/join "\n" duplicates)))))))

(defn is-long [song]
  (let [duration (or (get cache-map (fs/file-name song)) 0)]
    (> duration (* 60 15))))

(defn pomodoro-song-now []
  ;; todo: a way to do album length would be nice as well
  ;; would infer an album cache structure somewhere?
  ;; or maybe could make it from cache somehow (sum lengths)
  ;; (mpc "clear")
  (->> (mpc "listall")
       ;; (map fs/file-name)
       (map (fn [song]
              (list song (or (get cache-map (fs/file-name song)) 0))))
       (keep (fn [[song duration]]
               ;; (< (* 60 23) v (* 60 28))
               (when (< (* 60 23) duration (* 60 27))
                 song)))

       (shuffle)
       ;; (first)
       ;; (first)
       ;; (shell/sh "music" "now")
       ;; (:out)
       ;; (println)
       ))

(defn filter-meta [filter-fn]
  (let [delete-positions (->> (mpc "playlist" "-f" "%position% %file%")
                              (keep (fn [line]
                                      (let [[_ pos song] (first (re-seq #"([0-9]+) (.*)" line))]
                                        (when-not (filter-fn song)
                                          pos)))))]
    (mpc "del" :in (string/join "\n" delete-positions))))

(defn filter-is-long [] (filter-meta is-long))
(defn filter-is-short [] (filter-meta (complement is-long)))

(defn is-album-dir [[dir songs]]
  (let [indexed-pattern #"^([0-9]+)\..*"]
    (and
     ;; (< 3 (count songs))
     ;; (every? (complement is-long) songs) ; does this matter?
     (every? #(re-matches indexed-pattern (fs/file-name %)) songs)

     ;; kinda strict
     (let [numbers (sort (keep (fn [song]
                                 (when-let [match (re-matches indexed-pattern (fs/file-name song))]
                                   (read-string (string/replace (second match) #"^0+" ""))))
                               songs))]
       (= numbers (range (first numbers) (inc (count numbers)))))))) ; eric's idea

(defn shuffle-by-album
  ([] (shuffle-by-album is-album-dir))
  ([album-predicate]
   (->> (mpc "playlist" "-f" "%file%")
        (sort)
        (distinct)
        (group-by
         (fn [path]
           (->> (string/split path #"/")
                (drop-last)
                (string/join "/"))))
        (mapcat (fn [[dir songs]]
                  (if (album-predicate [dir songs])
                    [[dir songs]]
                    (map (fn [album] [dir [album]])
                         (filter is-long songs)))))
        (shuffle)
        (mapcat second))))

(defn shuffle-by-album-force []
  (shuffle-by-album (constantly true)))

(defn list-artists []
  (->> (track-names "listall")
       (filter #(string/includes? % " - " ) )
       (map #(string/split % #" - "))
       (map first)
       (map string/trim)
       (distinct)))

(defn list-artists-content []
  (->> (track-names "listall")
       (filter #(string/includes? % " - " ) )
       (map #(string/split % #" - "))
       (map first)
       (map string/trim)
       (frequencies)
       (keep (fn [[artist count]]
               (when (>= count 3)
                 artist)))))

(defn re-quote [s]
  ;; from https://stackoverflow.com/questions/11976210/javas-pattern-quote-equivalent-in-clojurescript
  (let [special (set ".?*+^$[]\\(){}|")
        escfn #(if (special %) (str \\ %) %)]
    (apply str (map escfn s))))

(comment
  ;; wip

  (defn list-artists-long []
    (let [all (count (mpc "listall"))]
      (->> (list-artists)
           (filter (fn [artist]
                     (>
                      (->> all
                           ;; (pmap (partial re-seq (re-pattern (format "[^a-zA-Z]%s[^a-zA-Z]" (re-quote artist)))))
                           (pmap #(when (string/includes? % artist)
                                    %
                                    ))
                           (remove nil?)
                           (count)
                           ;; (map fs/file-name)
                           ;; (map #(or (get cache-map %) 0))
                           ;; (apply +)
                           )
                      5
                      ;; (* 60 60 2)           ; 2 hours
                      )
                     )
                   )
           ))

    ))

(defn display-context []
  (let [{:keys [complete empty sep]} (read-string (:out (apply shell/sh (string/split "theme -n mkb -f complete,empty,sep" #" "))))
        current (Integer/parseInt (first (mpc "-f" "%position%")))
        current (dec current)
        playlist (track-names "playlist")]
    (->> (range (- current 2) (+ current 3))
         (remove neg?)
         (map (fn [index]
                (str (cond (> current index) complete
                           (< current index) empty
                           (= current index) sep)
                     " "
                     (nth playlist index)))))))

(defn format-length [length]
  (-> (list (int (-> length (/ 60) (/ 60)))
            (int (-> length (/ 60) (mod 60)))
            (int (mod length 60)))
      (interleave ["h " "m " "s"])
      (->> (apply str))))


(defn display-status []
  ;; todo: show album name if inferred (bandcamp/album dir etc)
  (when-not (= (mpc "playlist") [""])
    (let [song (first (track-names nil))
          song (if (clojure.string/includes? song " - ")
                 (second (string/split song #" - "))
                 song)
          percent (second (re-find #"([0-9]+)%" (second (mpc))))]
      (str song " " (:out (shell/sh "mkb" percent (str 10)))))))

(defn display-info []
  ;; todo: show album name if inferred (bandcamp/album dir etc)
  (when-not (= (mpc "playlist") [""])
    (->> (let [top (first (track-names nil))
               bottom (format
                       ;; "playlist: %s | %s"
                       "%s, %s"
                       (->> (str (util/shh "theme -q mpd.music-dir") "/playlist/current")
                            (slurp)
                            (string/trim))
                       (->> (mpc "playlist")
                            (map #(or (get cache-map (fs/file-name %)) 0))
                            (apply +)
                            (format-length)))
               percent (second (re-find #"([0-9]+)%" (second (mpc))))
               middle (:out (shell/sh "mkb" percent (str (util/longest-txtw (list top bottom)))))]
           [top middle bottom])
         (map string/trim)
         (string/join "\n")
         (shell/sh "box" :in)
         (:out)
         ;; (string/split-lines)
         ;; ((fn [it] (interleave it (display-context))))
         ;; (partition 2)
         ;; (map (partial string/join " "))
         ;; (string/join "\n")
         )))

(defn unused-songs []
  (let [playlist-songs (->> (fs/list-dir (str HOME "/.config/mpd/playlists") "*.m3u")
                            (map str)
                            (map slurp)
                            (string/join "\n")
                            string/split-lines
                            set)
        all-songs (set (mpc "listall"))]
    (set/difference all-songs playlist-songs)))



(when (= *file* (System/getProperty "babashka.file"))
  (let [cmd (or *command-line-args* ["shuffle-by-album"])
        result (apply (-> cmd first symbol resolve)
                      (rest cmd))]
    (cond
      (string? result) (print result)
      (and result (seqable? result)) (run! println result))))
