#!/usr/bin/env bb
;; do things with mpd
;; todo: better cue file support

(require '[clojure.java.shell :as shell]
         '[clojure.string :as string]
         '[babashka.fs :as fs])

(def cache-map
  (->> (string/split (slurp "/home/neeasade/.config/mpd/database")
                     #"song_begin:")
       (remove nil?)
       (remove #(= "" (string/trim %)))
       (keep (fn [song-chunk]
               (let [lines (string/split-lines song-chunk)
                     title (string/trim (first lines))
                     duration (first (filter #(string/starts-with? % "Time:") lines))
                     duration (when duration
                                (read-string (second (string/split duration #":"))))]
                 (when duration
                   {title duration}))))
       (into {})))

(defn is-long [song]
  (let [song-name (last (string/split song #"/"))
        duration (or (get cache-map song-name) 0)]
    (> duration (* 60 15))))

(defn mpc [& args] (string/split (:out (apply shell/sh "mpc" args)) #"\n"))

(defn pomodoro-song-now []
  ;; todo: a way to do album length would be nice as well
  ;; would infer an album cache structure somewhere?
  ;; or maybe could make it from cache somehow (sum lengths)
  (mpc "clear")
  (->> (mpc "listall")
       (map (fn [song]
              {song (or (get cache-map song) 0)}))
       (into {})
       (filter (fn [[k v]]
                 ;; (< (* 60 23) v (* 60 28))
                 (< (* 60 23) v (* 60 25))))
       (shuffle)
       (first)
       (first)
       (shell/sh "music" "now")
       (:out)
       (println)))

(defn filter-meta [filter-fn]
  (let [delete-positions (->> (mpc "playlist" "-f" "%position% %file%")
                              (keep (fn [line]
                                      (let [[_ pos song] (first (re-seq #"([0-9]+) (.*)" line))]
                                        (when-not (filter-fn song)
                                          pos)))))]
    (mpc "del" :in (string/join "\n" delete-positions))))

(defn filter-is-long [] (filter-meta is-long))
(defn filter-is-short [] (filter-meta (complement is-long)))

(defn is-album-dir [[dir songs]]
  (let [indexed-pattern #"^([0-9]+)\..*"]
    (and
     ;; (< 3 (count songs))
     ;; (every? (complement is-long) songs) ; does this matter?
     (every? #(re-matches indexed-pattern (fs/file-name %)) songs)

     ;; kinda strict
     (let [numbers (sort (keep (fn [song]
                                 (when-let [match (re-matches indexed-pattern (fs/file-name song))]
                                   (read-string (string/replace (second match) #"^0+" ""))))
                               songs))]
       (= numbers (range (first numbers) (inc (count numbers)))))))) ; eric's idea

(defn shuffle-by-album
  ([] (shuffle-by-album is-album-dir))
  ([album-predicate]
   (->> (mpc "playlist" "-f" "%file%")
        (sort)
        (distinct)
        (group-by
         (fn [path]
           (->> (string/split path #"/")
                (drop-last)
                (string/join "/"))))
        (mapcat (fn [[dir songs]]
                  (if (album-predicate [dir songs])
                    [[dir songs]]
                    (map (fn [album] [dir [album]])
                         (filter is-long songs)))))
        (shuffle)
        (mapcat second)
        (string/join "\n")
        (println))))

(defn shuffle-by-album-force []
  (shuffle-by-album (constantly true)))

((->> (or *command-line-args* ["shuffle-by-album"])
      first
      symbol
      resolve))
