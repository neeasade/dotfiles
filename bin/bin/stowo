#!/bin/sh
# narrow symlinker to match stow, but only from ~/.dotfiles
# idea for here: add an "all" to stowo paths you commonly care about

# todo: this doesn't deal well in replacing files that are currently in stow-created directories
# (IE, migration from stow -> stowo, if stow created the outline)

if [ -z "$*" ]; then
    echo "give me something to stOwO:"
    ls "$HOME/.dotfiles/"
    echo "or use the keyword 'all' to get:"
    ls "$HOME/.dotfiles/" | grep -vE "(nixos|readme.org|templates|windows|i3|bootstrap)" | tr $'\n' ' '
    echo
    exit 0
fi

if [ "$*" = "all" ]; then
    set -- $(ls "$HOME/.dotfiles/" | grep -vE "(nixos|readme.org|templates|windows|i3|bootstrap)" | tr $'\n' ' ')
fi

while [ ! -z "$1" ]; do
    cd "$HOME/.dotfiles/$1"
    # find . -type f | while read -r path; do
    results=$(
    git ls-files | while read -r path; do
	target="${HOME}/${path}"
	target=$(echo "$target" | sed 's#/\./#/#')

	# match symlink style of vanilla stow
	path="$(pwd)/${path}"
	path=$(echo "$path" | sed 's#/\./#/#')
	path=$(echo "$path" | sed "s#$HOME/##")

	# hell yeah brother HH
	prepend=$(echo "$path" | tr -dc '/' | cut -c3- | sed 's#/#../#g')
	path="$prepend$path"


	mkdir -p "$(dirname "$target")"

	if readlink "$target" >/dev/null; then
	    if [ "$(readlink "$target")" = "$path" ]; then
		# echo "link already in place, skipping $path"
		continue
	    else
		echo "updating link $path"
		echo placeholder >/dev/null
	    fi

	    rm "$target"
	fi

	if [ -f "$target" ]; then
	    if [ -z "$BS" ]; then
		echo "skipping conflict: $target (set BS=t to override)"
		continue
	    fi

	    rm "$target"
	fi

	echo ln -s "$path" "$target"
	ln -s "$path" "$target"
    done
    )

    if [ ! -z "$results" ]; then
	echo "stOwOing $1"
	pwd
	echo "$results"
	echo
    fi

    shift
done
