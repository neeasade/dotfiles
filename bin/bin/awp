#!/usr/bin/env elisp
;; -*- emacs-lisp -*-
;; automata wallpapers
;; see github.com/neeasade/automata (a fork of camille's tailored to wp generation)

(defun ns/random-list (list)
  "pick random item from list"
  (nth (random (length list)) list))

(defun ns/random-range (min max)
  (+ min (random (- (+ 1 max) min))))

(defun ns/awp-color-env (colors)
  (->> colors
       (-map 'ct-get-rgb)
       (-map (-lambda (parts) (--map (round (* it 2.55)) parts)))
       (-map-indexed
	(lambda (i parts)
	  (apply 'format "COLOR%s='%03d %03d %03d'" i parts)))
       (-reduce-from (-lambda (env new) (cons new env)) process-environment)))

(defun ns/awp-cmd (kind colors)
  (if (and kind (f-exists-p kind))
      ;; assume it's data, self invoked (only used for elementary save case, they generate bigger files)
      (llet [(rcmd rcolors) (read (second (s-lines (slurp kind))))]
	    ;; (list rcmd colors)
	    (list rcmd rcolors)
	    )
    ;; nominal case:
    (llet [(c1 c2 c3) colors
	   kind (if (string= kind "nil") nil kind)
	   kind (or kind (ns/random-list '("life" "rps" "disease" "pinwheels" "brain" "elementary")))
	   bin (format (~ "code/automata/c/%s/bin/%s") kind kind)]
	  (list
	   (if (string= kind "elementary")
	       (format "%s %s %s" bin
		       (ns/random-range 0 255)
		       ;; 57
		       ;; 99

		       (llet [probs
			      (--map (ns/random-list '(50 1 1 1)) (-iota
								   ;; (/ (display-pixel-width) 10)
								   5
								   ))
			      probs '(50 50 1 1 20)
			      ]
			     (->> probs
				  (-mapcat (lambda (prob)
					     (--map (if (> prob (random 100)) "1" "0")
						    (-iota (/ (display-pixel-width)
							      (length probs))))))
				  (s-join ""))))
	     (format "%s -w %s -h %s -i %s"
		     bin
		     (ns/random-range 0 800)
		     (ns/random-range 0 800)
		     (ns/random-range 30 300)))
	   (cond
	     ((string= kind "pinwheels") (list c2 c3 c1)) ; weird one
	     (t colors))))))

(defun ns/awp (colors-in &optional kind output-file)
  (llet [(cmd (c1 c2 c3)) (ns/awp-cmd kind colors-in)
	 kind (f-base (first (s-split " " cmd)))
	 process-environment (ns/awp-color-env colors-in)
	 set-bg? (not output-file)
	 output-file (or output-file "/tmp/result.png")]

	(when (f-exists-p output-file)
	  (f-delete output-file))

	;; when debugging:
	;; (sh "%s > /dev/shm/temp.pbm" cmd)
	;; (sh "ffmpeg -i /dev/shm/temp.pbm -ss 00:00:00 -frames:v 1 \"%s\"" output-file)

	(sh "%s | ffmpeg -i - -ss 00:00:00 -frames:v 1 \"%s\"" cmd output-file)

	(when (or (string= kind "elementary"))
	  (sh "convert '%s' -colorspace sRGB -fill '%s' -opaque '%s' '%s'" output-file c1 "#ffffff" output-file)
	  (sh "convert '%s' -colorspace sRGB -fill '%s' -opaque '%s' '%s'" output-file c2 "#000000" output-file)

	  ;; crop top bit to get rid of setup
	  (sh "convert %s -crop %sx%s+0+300 +repage %s" output-file (display-pixel-width) (display-pixel-height) output-file)

	  (spit (ns/str output-file ".awp")
		(format "#!/usr/bin/env awp\n%s" (pr-str (list cmd (list c1 c2 c3))))))

	(when (and ns/enable-linux-p set-bg?)
	  (sh "feh --bg-tile \"%s\"" output-file))

	(s-truncate 50 (format "%s%s" kind (-last-item (s-split kind cmd))))))

;; play here:
(apply 'ns/awp
       (->>
	(list
	 (myron-get :background)
	 ;; ;; (myron-get :background :weak)
	 ;; (myron-get :background :focused)
	 (ct-pastel (myron-get :assumed))
	 ;; (ct-pastel (myron-get :primary))
	 ;; (ct-pastel (myron-get :alt))
	 ;; (myron-get :primary)
	 ;; (myron-get :background :weak)
	 ;; (ns/make-border-color (myron-get :primary))
	 (myron-get :background :focused)
	 )

	;; (--map (ct-edit-rgb-r it (lambda (r) (+ r 30))))
	;; (--map (ct-edit-lch-c it 60))
	)

       (when (boundp 'ns-args)
	 ns-args))
