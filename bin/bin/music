#!/usr/bin/env bash
# https://notes.neeasade.net/search-term-playlists.html
# duties:
# - wrap the importing of music from the internet
# - define music playlists by search terms
# - add a neat display func
# - some helpers to manage your local music
# musicdir="$HOME/Music"
musicdir=$(awk -F\" '/music_directory/{print $2}' "$HOME/.config/mpd/mpd.conf")
current_playlist="${musicdir}/playlist/current"

### HELPERS/MAINT
log() {
  printf '%s\n' "$*"
  notify-send -u low "$*"
}

usage() {
  # todo: this all in awk
  echo "music options:"
  grep -E "^[A-Za-z_]+\(\) {.*#" "$0" | sed 's/() {//' | sort | \
    awk -F \# '{ printf "%-9s:%s\n", $1, $2 }'
  exit 1
}

count() {
    printf '%s\n' "$#"
}

is_album_song() {
  file=$1

  if [[ $file =~ bandcamp ]]; then
    return 0
  fi

  count=$(count "$(dirname "$file")"/*)
  # these numbers were chosen arbitrarily.
  if [ $count -lt 15 ]; then
    if [ $count -gt 4 ]; then
      return 0
    fi
  fi

  return 1
}

is_long() {
  milli=$(mediainfo --Inform="Audio;%Duration%" "$*")
  milli=${milli%.*}

  if [ -z "$milli" ]; then
    return 1
  fi

  seconds=$(( $milli / 1000))
  if [ $seconds -gt $((60 * 15)) ]; then
    return 0
  else
    # is_album_song "$*"
    # return $!
    return 1
  fi
}

is_short () {
  ! is_long "$@"
}

filter() { # filter the current playlist by some shell function acting on music files
  log "filter $*"

  fn=$1
  mpc playlist -f '%position% %file%' |
    while read -r pos file; do
      if ! "$fn" "${musicdir}/$file" >/dev/null; then
	echo "$pos"
      fi
    done | mpc del
}

clear_duplicates() {
  duplicates_exist() {
    duplicates=$(mpc playlist -f '%position% %file%' | sort -k2 | tac | uniq -f1 -d | sed 's/ .*//')
    ! test -z "$duplicates"
  }

  while duplicates_exist; do
    mpc del --wait <<< "$duplicates"
  done

  # SOMEHOW, adding a sleep here fixes a race condition
  # if you take an action like clearing or adding too soon after del
  # filepaths are appearing scrambled
  # this doesn't make too much sense to me.
  # reproduce path: music artist 'runescape斯凱利'; music shuffle_preserve_album
  sleep 1
}

### ACTIONS

add() { # add a url to library, fallback on clipboard content
  url=$*
  [ -z "$url" ] && url=$(xclip -o -selection clipboard)
  mkdir -p "$musicdir/import"

  # note: get all of an artists album links example:
  example() {
  url='https://shigeto.bandcamp.com/music'
  curl "$url" | pup a attr{href} | awk "/\/album/" | sed -e "s#^#music add '$(echo "$url" | sed 's/music//')#" -e "s/$/'/"
  }

  if [[ $url =~ youtube.com ]]; then
    format="$musicdir/import/%(uploader)s/%(title)s.%(ext)s"
  else
    # usually bandcamp -- we want track_number for album song order sorting
    format="$musicdir/import/bandcamp/%(uploader)s/%(album)s/%(track_number)02d. %(title)s.%(ext)s"
  fi

  youtube-dl --download-archive  "$musicdir/download_archive.txt" -x -i -o "$format" "$url"

  mpc update # re-index
}

del() { # delete the currently playing song
  read -r location <<< $(mpc -f '%file%')
  rm "$musicdir/$location"
  mpc next
  mpc update
}

append() { # append some search term to the current playlist
  echo append "$*"

  if [ "$interactive_op" = "append" ]; then
      # we called append at an interative level, therefore we are no longer tied to any playlist
      echo "custom" > "$current_playlist"
  fi

  if [ -z "$songs_cached" ]; then
     songs_cached=$(mpc listall)
  fi

  grep -i $GREP_EXTRA "$*" <<< "$songs_cached" | mpc add --wait
  if [ "$interactive_op" = "append" ]; then
    clear_duplicates
  fi
}

remove() { # remove some search match from the playlist
  echo remove "$*"
  mpc playlist -f '%position% %file%' | grep -i $GREP_EXTRA "$*" | sed 's/ .*//' | mpc del
}

now() { # fuzzy search for a song, play it now
  if song=$(mpc listall | dmenu "song"); then
    mpc insert "$song"
    mpc next
    mpc play
    # echo "custom" > "$current_playlist"
  fi
}

bl() { # blacklist the currently playing song from the current playlist.
  playlist=$(cat "$current_playlist")
  songname=$(basename "$(mpc -f '%file%' | head -n 1)")
  songname=$(sed "s#'#\'\\\'\'#g" <<< "$songname")
  printf "\n- '${songname}'" >> "$musicdir/playlist/$playlist"
  mpc next
}

artist() { # play songs by an artist
  artist=$*
  if [ -z "$artist" ]; then
    if ! artist=$({
		   mpc listall -f '%artist%' | grep -v '^$' | tr '[:upper:]' '[:lower:]' | sort | uniq
		   cat "${musicdir}/playlist/artists"
		   ls "${musicdir}/import/bandcamp/"
		 } | sort | uniq | dmenu); then
      return
    fi
  fi

  log "artist $artist"

  if [ "$interactive_op" = "artist" ]; then
    echo "$artist" > "$current_playlist"
    mpc clear
  fi

  {
    append "/${artist} "
    append "/${artist}/"
    append "/${artist}[ ]\+[-(]"
    append "\. ${artist}[ ]\+[-(]"
    append "\- ${artist}\(\..*\)\?$"
  } >/dev/null

  # correct casing for exact matches from the above
  mpc listall -f '%artist%' | grep -i "^${artist}$" | \
    while read corrected; do
      mpc find artist "$corrected" | mpc add --wait
    done

  if [ "$interactive_op" = "artist" ]; then
    clear_duplicates

    if ${SHUFFLE:-true}; then
      # shuffle_preserve_album
      # no_long_filter
      mpc shuffle
    fi

    mpc play
  fi
}

artist_append() {
  # interactive op redir
  artist "$@"
}

playlist() { # select a search term based playlist to play
  if [ -z "$1" ]; then
    if ! target=$(ls "${musicdir}/playlist" | dmenu); then
      return
    fi
  else
    target=$*
  fi

  mpc clear
  echo "$target" >"$current_playlist"

  # Check if we can use the cached playlist
  # <2021-11-22 Mon 10:09> this has been tested and works as expected.
  mpd_database="$HOME/.config/mpd/database"
  mpd_playlist="$HOME/.config/mpd/playlists/${target}.m3u"
  music_playlist="$musicdir/playlist/${target}"
  if ! grep -i shuffle "$music_playlist"; then
    if [ -s "$mpd_playlist" ]; then
      if [ "$mpd_playlist" -nt "$music_playlist" ]; then
	if [ "$mpd_playlist" -nt "$mpd_database" ]; then
	  echo "loading cached playlist $mpd_playlist"
	  cat "$mpd_playlist" | mpc add
	  # this shuffle is problematic -- how can you know if og playlist wanted it
	  mpc shuffle
	  mpc play
	  return
	fi
      fi
    fi
  fi

  # let's get really dumb, DSL through character functions
  + () { append "$@"; }
  - () { remove "$@"; }
  @ () { artist "$@"; }
  . "$music_playlist"

  clear_duplicates
  if ${SHUFFLE:-true}; then
    mpc shuffle
  fi
  mpc play

  mpc rm "$target"
  mpc save "$target"
}

# mpc only
name_from_pos() {
  pos=$1
  name=$(mpc playlist -f '%title% - %artist%' | awk "NR==${pos}")
  if [ "$name" = ' - ' ]; then
    name=$(basename "$(mpc playlist -f '%file%' | awk "NR==${pos}")")
    name=${name%.*}
  fi

  # ASSUME
  if grep -qE '\-[0-9a-zA-Z_\-]{11}$' <<< "$name" ; then
    name=${name::-12}
  fi

  remove_delim() {
    name=$(echo "$name" | sed -e "s/${1}[^${1}${2}]*${2}//g")
  }

  remove_delim '(' ')'
  remove_delim '[' ']'
  remove_delim '【' '】'
  remove_delim '●' '●'

  case "$name" in
      # track index
      [0-9][0-9].*) name=${name:4} ;;
  esac

  echo "$name"
}

info() { # display the current audio progress bar and playlist length
  if [ "$(GET=t player.sh)" = "playerctl" ]; then
    name=$(player.sh -f '%title% - %artist%')
    # we can't get the percent from playerctl, fake it for the looks
    # cf https://bytefreaks.net/gnulinux/bash/bash-get-random-number-that-belongs-in-a-range
    bottom=40
    top=80

    range=$((top-bottom+1))
    percent=$RANDOM
    let "percent %= $range"
    percent=$((percent+bottom))
  else
    pos=$(mpc -f '%position%' | head -n 1)
    name=$(name_from_pos $pos)
    percent=$(mpc | awk 'match($0,/\(([0-9]+)%\)/, groups) {print groups[1]}')
  fi

  echo "$name"

  mkb "$percent" $(wc -L <<< "$name")

  # echo "playlist: $(cat $current_playlist) | $(playlist_length)"
  echo "$(cat $current_playlist) | $(playlist_length)"
}

info2() {
  echo "  >> playlist: $(cat $current_playlist) | $(playlist_length) <<"
  context
}

shuffle_preserve_album() {
  log shuffle_preserve_album

  clear_duplicates # this clear is important for mpd_shuffle to work (group_by)
  shuffled=$(mpd_shuffle "$@")
  mpc clear
  sleep 1 # see the SOMEHOW note
  mpc add <<< "$shuffled"
  mpc play
}

context() {
  pos=$(mpc -f '%position%' | head -n 1)
  start=$((pos - 2))
  if [ $start -lt 1 ]; then
    start=1
  fi
  end=$((pos + 2))

  # todo: this better (multi -q + read)
  complete=$(theme -q mkb.complete)
  empty=$(theme -q mkb.empty)
  sep=$(theme -q mkb.sep)

  mpc playlist -f '%position%' | awk " {
if (NR>=${start} && NR<=$end)
    {
if (NR==${pos})
{ print \"${sep} \" \$0}
else if (NR<${pos})
{ print \"${complete} \" \$0}
else if (NR>${pos})
{ print \"${empty} \" \$0}
    }} " | while read -r prefix pos; do
  echo "$prefix $(name_from_pos $pos)"
  done
}

interactive_op=${1:-usage}
shift
$interactive_op "$@"
