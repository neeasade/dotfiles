#!/usr/bin/env bash
# this is by far my favorite script to tinker with
# https://notes.neeasade.net/search-term-playlists.html
# duties:
# - wrap the importing of music from the internet
# - define music playlists by search terms
# - add a neat display func
# - some helpers to manage your local music

# todo: interactive options: comma -> filter or disable shuffler options
# eg:
# music artist late night alumni, noshuffle
# music artist deadmau5, long

# musicdir="$HOME/Music"
musicdir=$(awk -F\" '/music_directory/{print $2}' "$HOME/.config/mpd/mpd.conf")
current_playlist="${musicdir}/playlist/current"

### HELPERS/MAINT

log() {
  printf '%s\n' "$*"
  notify-send -u low "$*"
}

usage() {
  echo "music options:"
  longest=$(awk -F \( '/\(\) {[ ]+#/{print $1}' "$0" | wc -L)
  script='/\(\) {[ ]+#/{printf "%-LONGESTs:%s\n", $1, $3}'
  awk -F'[(#]' "${script/LONGEST/$longest}" "$0" | sort
}

filter() { # filter the current playlist by some shell function acting on music files
  ${loaded_cached_playlist:-false} && return
  log "filter $*"
  # compat
  case "$1" in
      long|is_long)  mpd-mixer filter-is-long;;
      short|is_short) mpd-mixer filter-is-short;;
      contains) shift; mpd-mixer filter-contains "$*";;
      # todo restore this? used in at least one playlist
      *) echo "unknown filter! $*" ;;
  esac
}

shuffle_preserve_album() { shuffler; }

### ACTIONS

restore() {
  IFS=^ read restore_song restore_place <<< "$*"
  now "$restore_song"
  mpc -q seek "+$restore_place"
}

place() { # print a command to take you to the current place
  state_song=$(mpc -f "%file%" | head -n 1)
  state_progress=$(mpc -f '%file%' | awk -F '[ /]*' 'NR==2{print $4}')
  printf "music restore \"%s^%s\"\n" "${state_song}" "${state_progress}"
}

add() { # add a url to library, fallback on clipboard content
  url=$*
  [ -z "$url" ] && url=$(xclip -o -selection clipboard)
  mkdir -p "$musicdir/import"

  # note: get all of an artists album links example:
  example() {
    url='https://purityfilter.bandcamp.com/music'
    url='https://golemm.bandcamp.com/music'
    curl "$url" | pup a attr{href} | awk "/\/album/" | sed -e "s#^#music add '$(echo "$url" | sed 's/music//')#" -e "s/$/'/"
  }

  # todo: this should handle unknown sources better
  # known one: soundcloud (eminence)
  if [[ $url =~ youtube.com ]]; then
    format="$musicdir/import/%(uploader)s/%(title)s.%(ext)s"
  else
    # usually bandcamp -- we want track_number for album song order sorting
    format="$musicdir/import/bandcamp/%(uploader)s/%(album)s/%(track_number)02d. %(title)s.%(ext)s"
  fi

  # when adding youtube album playlists:
  # format="$musicdir/import/%(uploader)s/%(title)s.%(ext)s"

  # playlist_index
  # format="$musicdir/import/bandcamp/%(uploader)s/%(album)s/%(track_number)02d. %(title)s.%(ext)s"

  yt-dlp --download-archive  "$musicdir/download_archive.txt" -x -i -o "$format" "$url"

  mpc update
}

del() { # delete the currently playing song
  read -r location <<< $(mpc -f '%file%')
  rm "$musicdir/$location"
  mpc next
  mpc update
}

append_playlist() { # append playlist contents and call shuffler
  current=$(mpc playlist)
  playlist "$@"
  mpc add <<< "$current"
  shuffler
}

append() { # append some search term to the current playlist
  ${loaded_cached_playlist:-false} && return

  echo append "$*"

  if [ -z "$songs_cached" ]; then
     songs_cached=$(mpc listall)
  fi

  grep -i "$*" <<< "$songs_cached" | mpc -q add --wait

  if [ "$interactive_op" = "append" ]; then
    # we called append at an interactive level, therefore we are no longer tied to any playlist
    echo "custom" > "$current_playlist"
  fi
}

remove() { # remove some search match from the playlist
  ${loaded_cached_playlist:-false} && return
  # echo remove "$*"
  mpc playlist -f '%position% %file%' | grep -F -i "$*" | sed 's/ .*//' | mpc del
}

rm() {
  remove "$@"
}

now() { # fuzzy search for a song, play it now
  song=$*
  if [ -z "$song" ]; then
    if ! song=$(mpc listall | dmenu "song"); then
       return
    fi
  fi

  mpc --wait -q insert "$song"
  mpc -q next
  mpc -q play
}

bl() { # blacklist the currently playing song from the current playlist
  playlist=$(cat "$current_playlist")
  songname=$(basename "$(mpc -f '%file%' | head -n 1)")
  songname=$(sed "s#'#\'\\\\\'\'#g" <<< "$songname")
  printf "\n- '${songname}'" >> "$musicdir/playlist/$playlist"
  mpc next
}

artist_no_sort() {
  # shuffle but not with mpd-mixer
  SHUFFLE=false
  artist
  mpc shuffle
}

known_artists() {
  {
    mpc listall -f '%artist%' | grep -v '^$' | tr '[:upper:]' '[:lower:]'
    mpc listall | grep '/Vapor Memory/' | grep ： | awk -F '[：/&]' '{print $3}' | uniq | awk '{$1=$1};1'
    cat "${musicdir}/playlist/artists"
    ls "${musicdir}/import/bandcamp/"
    ls "${musicdir}/import/" | awk -F/ '{print $NF}'
  } | sort | uniq
}

artist() { # play songs by an artist
  ${loaded_cached_playlist:-false} && return
  artist=$*
  if [ -z "$artist" ]; then
    if ! artist=$(known_artists | dmenu); then
      return
    fi
  fi

  log "artist $artist"
  if [ "$interactive_op" = "artist" ]; then
    mpc clear
  fi

  append "[^a-z]${artist}[^a-z]" >/dev/null
  mpc listall -f ' %artist% ' | grep -i "[^a-z]${artist}[^a-z]" | uniq | \
    while read -r corrected; do
      mpc find artist "$corrected" | mpc add --wait
    done

  if [ "$interactive_op" = "artist" ]; then
    echo "@${artist}" > "$current_playlist"

    if ${SHUFFLE:-true}; then
      shuffler
    fi

    mpc play
  fi
}

artist_append() {
  # interactive op redir
  artist "$@"
}

break_cache() {
  mpc clear
  loaded_cached_playlist=false
  echo "unloaded cached playlist"
}

playlist() { # select a search term based playlist to play
  target=$*
  if [ -z "$target" ]; then
    if ! target=$(ls "${musicdir}/playlist" | dmenu); then
      return
    fi
  fi

  echo "$target" >"$current_playlist"
  mpc -q clear
  loaded_cached_playlist=false

  # Check if we can use the cached playlist
  # <2021-11-22 Mon 10:09> this has been tested and works as expected.
  mpd_database="$HOME/.config/mpd/database"
  mpd_playlist="$HOME/.config/mpd/playlists/${target}.m3u"
  music_playlist="$musicdir/playlist/${target}"
  if [ -s "$mpd_playlist" ]; then
    if [ "$mpd_playlist" -nt "$music_playlist" ]; then
      if [ "$mpd_playlist" -nt "$mpd_database" ]; then
	echo "found cached playlist!"
	cat "$mpd_playlist" | mpc -q add
	loaded_cached_playlist=true
      fi
    fi
  fi

  # let's get really dumb, DSL through character functions
  + () { append "$@"; }
  - () { remove "$@"; }
  @ () { artist "$@"; }
  , () { filter "$@"; }

  . "$music_playlist"

  # perma mods rn:
  remove chloe >/dev/null
  remove dream.dance >/dev/null

  if ${SHUFFLE:-true}; then
    echo mpc -q shuffle
    mpc -q shuffle
  fi
  mpc -q play

  if [ -f "$mpd_playlist" ]; then
    mpc -q rm "$target"
  fi
  mpc -q save "$target"

  echo
  info
}

shuffler() { # invoke mpd-mixer
  echo "calling shuffler"
  SHUFFLE=false # prevent playlists with this in their definition from shuffling
  shuffled=$(mpd-mixer ${*:-shuffle-by-album})
  mpc -q clear
  if [ -z "$shuffled" ]; then
    log "mpd-mixer : removed everything!"
    return 1
  fi
  mpc -q add <<< "$shuffled"
  mpc -q play
}

### DISPLAY FUN

name_from_pos() {
  pos=$1
  if [ -z "$pos" ]; then
    pos=$(mpc -f '%position%' | head -n 1)
  fi

  IFS=^ read title artist < <(mpc playlist -f '%title%^%artist%' | awk "NR==${pos}")
  if test -z "$title" || test -z "$artist"; then
    name=$(basename "$(mpc playlist -f '%file%' | awk "NR==${pos}")")
    name=${name%.*}
  else
    name="$title - $artist"
  fi

  # ASSUME
  if grep -qE '\-[0-9a-zA-Z_\-]{11}$' <<< "$name" ; then
    name=${name::-12}
  fi

  clean_name
}

clean_name() {
  # operates on an already set $name var
  remove_delim() {
    name=$(sed "s/${1}[^${2: -1}]*${2}//g" <<< "$name")

    # don't use this one, it's greedy, eg:
    # Hiroshi Yoshimura (吉村弘) - 静けさの本 (Static) (1988) [Full Album].opus
    # -> Hiroshi Yoshimura [Full Album].opus
    # name=$(sed "s/${1}\(.*\)${2}//g" <<< "$name")
  }

  remove_delim '(' ')'
  remove_delim '\[' '\]'
  remove_delim '【' '】'
  remove_delim '●' '●'
  remove_delim '～' '～'

  case "$name" in
      # track index
      [0-9][0-9].*) name=${name:4} ;;
  esac

  # todo: this better? want ^[0-9]{4} $
  # name=${name// [0-9][0-9][0-9][0-9] / }

  name=${name/full album}
  name=${name//_/ }
  name=${name//  / }
  name=${name//  / }
  name=${name/|/-}
  name=${name/▶︎ /}
  name=${name%% - }

  trim_string() {
    # ugh
    : "${1#"${1%%[![:space:]]*}"}"
    : "${_%"${_##*[![:space:]]}"}"
    printf '%s\n' "$_"
  }

  trim_string "$name"
}

gather_playerctl_info() {
  percent=$((RANDOM%100))

  IFS=^ read length name from < <(player.sh -f '{{mpris:length}}^%title%^%artist%')
  case "$name" in
      # bandcamp specific thingy for artists under a label:
      "▶︎ "*|*|*)
	  IFS=\| read title artist from < <(echo "$name")
	  name="${title} - ${artist}"
	  ;;
  esac

  if ! test -z "$length"; then
    p_position=$(playerctl position)
    percent=$(bc <<< "($p_position * 100) / ($length / 1000000)")
  fi
  if ! test -z "$from"; then
    if ! grep -qi "$from" <<< "$name"; then
      from=$(name=$from clean_name)
      bottom_line="from: $from"
    fi
  fi

  name=$(clean_name)
}

info() { # display the current audio progress bar and playlist length
  (
  if [ "$(GET=t player.sh)" = "playerctl" ]; then
    gather_playerctl_info
  else
    name=$(name_from_pos)
    percent=$(mpc | awk -F '[(%]' 'NR==2{print $2}')
    bottom_line=$(printf "playlist: %s | %s" "$(cat "$current_playlist")" "$(playlist_length)")
  fi

  # name_length=$(wc -c <<< "$name")
  # bottom_line_length=$(wc -c <<< "$bottom_line")

  # name_length=${#name}
  # bottom_line_length=${#bottom_line}

  name_length=$(wc -L <<< "$name")
  bottom_line_length=$(wc -L <<< "$bottom_line")

  name_length=$(txtw <<< "$name")
  bottom_line_length=$(txtw <<< "$bottom_line")

  echo $name_length

  w_progress=$name_length
  # if (( bottom_line_length > name_length )); then
  #   w_progress=$bottom_line_length
  # fi

  # wtf?
  # pad_left=$(( name_length / 2 + bottom_line_length / 2 ))
  pad_left=$(( name_length / 2 ))
  align_print() {
    line=$*
    line_length=${#line}
    # line_length=$(wc -m <<< "$line")
    add=$(( $(txtw <<< "$line") - ${line_length} ))
    printf "%$((pad_left + add))s\n" "$line"
  }

  # doesn't take into account song lengths
  playlist_percent=$(mpc | awk '/#/{print substr($2, 2) " * 100"}' | bc -l)

  align_print "$name"
  mkb "${percent/.*/}" $w_progress
  # mkb "${playlist_percent/.*/}" $w_progress
  test -z "$bottom_line" || align_print "$bottom_line"
  ) | box
}

info2() {
  echo "  >> playlist: $(cat $current_playlist) | $(playlist_length) <<"
  context
}

contextall() {
  # playlist list but nice
  # pos=$(mpc -f '%position%' | head -n 1)
  # start=0
  # end=$(mpc playlist | wc -l)

  while read -r pos; do
    name_from_pos $pos
  done < <(mpc playlist -f '%position%')
}

context() {
  pos=$(mpc -f '%position%' | head -n 1)
  start=$((pos - 2))
  if [ $start -lt 1 ]; then
    start=1
  fi
  end=$((pos + 2))

  eval "$(theme -n mkb -f "complete,empty,sep" -s)"

  # supressing warnings for this one:
  # awk: cmd. line:8: warning: escape sequence `\_' treated as plain `_'
  mpc playlist -f '%position%' | awk " {
if (NR>=${start} && NR<=$end)
    {if (NR==${pos})
{ print \"\\${sep} \" \$0}
else if (NR<${pos})
{ print \"\\${complete} \" \$0}
else if (NR>${pos})
{ print \"\\${empty} \" \$0}
    }} " 2>/dev/null | while read -r prefix pos; do
  echo "$prefix $(name_from_pos $pos)"
  done
}

interactive_op=${1:-usage}
shift
$interactive_op "$@"


mpd-mixer clear-duplicates

# Local Variables:
# sh-shell: sh
# End:
