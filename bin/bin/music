#!/usr/bin/env bash
# wrap the importing of music from the internet
# define music playlists by search terms
# add a neat display func

# musicdir="$HOME/Music"
musicdir=$(awk -F\" '/music_directory/{print $2}' "$HOME/.config/mpd/mpd.conf")

current_playlist="${musicdir}/playlist/current"

add() { # add a url to library, fallback on clipboard content

  url=$*
  [ -z "$url" ] && url=$(xclip -o -selection clipboard)
  mkdir -p "$musicdir/import"

  # note: get all of an artists album links example:
  # url='https://sewerslvt.bandcamp.com/'
  # curl "$url" | pup a attr{href} | awk "/\/album/" | sed -e "s#^#music add '${url}#" -e "s/$/'/"

  if echo "$url" | grep -q 'bandcamp.com'; then
    # bandcamp music is organized by album:
    format="$musicdir/import/bandcamp/%(uploader)s/%(album)s/%(title)s.%(ext)s"
  else
    format="$musicdir/import/%(uploader)s/%(title)s.%(ext)s"
  fi

  titles=$(youtube-dl -x -i -j -o "$format" "$url" | jq -r .title)

  if youtube-dl -x -i -o "$format" "$url"; then
    echo "$titles" | while read -r title; do
	printf "\n|%s|%s|%s|%s|" "$url" "$title" "$(date)" "success" >> "$musicdir/import_history.log"
    done
  else
    echo "$titles" | while read -r title; do
	printf "\n|%s|%s|%s|%s|\n" "$url" "$title" "$(date)" "fail" >> "$musicdir/import_history.log"
    done
  fi

  mpc update # re-index
}

del() { # delete the currently playing song
  location=$(mpc -f "%file%" | head -n 1)
  rm "$musicdir/$location"
  mpc next
  mpc update
}

rename() { # rename the currently playing song file name (keep directory)
  location=$(mpc -f "%file%" | head -n 1)
  location="${musicdir}/$location"
  new_name=$*

  # new name needs
  if ! echo "$new_name" | grep "\."; then
    ext=${location##*.}
    new_name="${new_name}.${ext}"
  fi

  new_name="$(dirname "$location")/$new_name"
  echo mv "$location" "$new_name"
  mv "$location" "$new_name"
  mpc update
  mpc next
}

usage() {
  echo "music options:"
  grep -E "^[A-Za-z_]+\(\) {.*#" "$0" | sed 's/() {//' | sort | while read -r line; do
    action=$(echo "$line" | sed 's/ #.*//')
    desc=$(echo "$line" | sed 's/.*# //')
    printf "%-10s : %s\n" "$action" "$desc"
  done
  exit 1
}

shuffle() { # reshuffle current selection from all
  mpc clear
  if [ -z "$*" ]; then
    mpc listall | sort -R | head -n 1000 | mpc add
  else
    append "$*"
  fi
  echo "shuffle" > "$current_playlist"
  mpc play
}

# is a file longer than 20 min
is_long() {
  milli=$(mediainfo --Inform="Audio;%Duration%" "$*" | sed 's/\..*//')
  if [ -z "$milli" ]; then
    return 1
  fi

  seconds=$(( $milli / 1000))
  if [ $seconds -gt $((60 * 20)) ]; then
    return 0
  else
    return 1
  fi
}

append() { # append some search term to the current playlist
  echo append "$*"

  if [ "$op" = "append" ]; then
      # we called append at a top level, therefore we are no longer tied to any playlist
      echo "custom" > "$current_playlist"
  fi

  if [ "$*" = "long_songs" ]; then
    cat "${musicdir}/long_songs"
    mpc listall | is_long_filter | mpc add
  else
    mpc listall | grep -i "$*" | mpc add
  fi
}

remove() { # remove some search match from the playlist
  echo remove "$*"

  if [ "$*" = "long_songs" ]; then
    is_long_filter() {
      while read -r pos_song; do
	song=$(echo "$pos_song" | sed -E 's/[0-9]+ //')
	if is_long "${musicdir}/$song"; then
	  echo "$pos_song"
	fi
      done
    }
    positions=$(mpc playlist -f '%position% %file%' | is_long_filter | sed 's/ .*//')
  else
    positions=$(mpc playlist -f '%position% %file%' | grep -i "$@" | sed 's/ .*//')
  fi

  delta=0
  for position in $positions; do
    mpc del $((position - delta))
    delta=$((delta + 1))
  done
}

now() { # fuzzy search for a song, play it now
  if song=$(mpc listall | dmenu "song"); then
    mpc insert "$song"
    mpc next
    mpc play
    # echo "custom" > "$current_playlist"
  fi
}

nowmpv() { # fuzzy search for a song, play it now with MPV
  if song=$(mpc listall | dmenu); then
      mpv "$musicdir/$song"
      echo mpv "$musicdir/$song"
  fi
}

bl() { # blacklist the currently playing song from the current playlist.
  playlist=$(cat "$current_playlist")
  songname=$(basename "$(mpc -f '%file%' | head -n 1)")
  printf "\n-$songname" >> "$musicdir/playlist/$playlist"
  mpc next
}

artist() { # play songs by an artist
  artist=$(cat<<EOF | dmenu
$(mpc listall -f '%artist%' | grep -v '^$' | tr '[:upper:]' '[:lower:]' | sort | uniq)
$(cat ${HOME}/Music/playlist/artists)
EOF
	)

  if [ ! -z "$artist" ]; then
    echo "$artist" > "$current_playlist"
    mpc clear

    append "/${artist} -"
    append "/${artist}-"
    append "/${artist} \(.+\)"
    append "\- ${artist}"

    # correct case for exact matches from the above
    real=$(mpc listall -f '%artist%' | grep -i "^${artist}$" | head -n 1)
    if [ ! -z  "$real" ]; then
      mpc find artist "$real" | mpc add
    fi

    mpc shuffle
    mpc play

    # clear duplicates
    # cf https://gist.github.com/hfs/1b7c120c07ce63cd9105ed59788a6915
    mpc playlist -f '%position%\t%file%' | sort -k 2 | perl -ne 'm/(.*)\t(.*)/; print "$1\n" if $2 eq $prev; $prev=$2' | mpc del
  fi
}

playlist() { # select a search term based playlist to play
  if [ -z "$1" ]; then
    if ! target=$(ls "${musicdir}/playlist" | dmenu); then
      return
    fi
  else
    target=$*
  fi

  echo "$target" >"$current_playlist"
  mpc clear
  while read -r line ; do
    case "${line:0:1}" in
      +) append "${line#?}";;
      -) remove "${line#?}";;
      *) ;;
    esac
    # the cat is so a newline is appended
  done < <(cat "$musicdir/playlist/$target"; echo)

  # clear duplicates
  # cf https://gist.github.com/hfs/1b7c120c07ce63cd9105ed59788a6915
  mpc playlist -f '%position%\t%file%' | sort -k 2 | perl -ne 'm/(.*)\t(.*)/; print "$1\n" if $2 eq $prev; $prev=$2' | mpc del

  # todo: some flag to not shuffle a playlist
  mpc shuffle
  mpc play
}

infoname() {
  name=$(player.sh -f '%title% - %artist%' | head -n 1)
  if [ "$name" = ' - ' ]; then
    name=$(basename "$(mpc -f '%file%' | head -n 1)")
    name=${name%.*}
  fi
  echo "$name"
}

info() { # display the current song progress bar and playlist length
  infoname

  length=$(wc -L <<< "$name")
  # length=$(wc -c <<< "$name")

  if [ "$(GET=t player.sh)" = "playerctl" ]; then
      # we can't get the percent, fake it for the looks
      # cf https://bytefreaks.net/gnulinux/bash/bash-get-random-number-that-belongs-in-a-range
      bottom=40
      top=80
      range=$((top-bottom+1))

      percent=$RANDOM
      let "percent %= $range"
      percent=$((percent+bottom))
  else
      percent=$(mpc | awk 'match($0,/\(([0-9]+)%\)/, groups) {print groups[1]}')
  fi

  "$HOME/.wm/panel/tools/mkb" $percent $length

  if [ "$(GET=t player.sh)" = "mpc" ]; then
      echo "playlist: $(cat $current_playlist) | $(playlist_length)"
  fi
}

recent() { # play recently added songs
  recent_count=10

  grep -E "^\|.*" "$musicdir/import_history.log"  | \
      awk -F\| '{print "+" $3}' | \
      tail -n $recent_count > "${musicdir}/playlist/recent"

  playlist recent
}

op=${1:-usage}
shift
$op "$@"
