#!/usr/bin/env bash
# -*- eval: (setq-local sh-basic-offset 2) -*-
# wrap the importing of music from the internet
# define music playlists by search terms

musicdir="$HOME/Music"
current_playlist="${musicdir}/playlist/current"

add() { # add a url to library, fallback on clipboard content
  url=$*
  [ -z "$url" ] && url=$(xclip -o -selection clipboard)
  echo "$url" >> "$musicdir/import_history.log"
  mkdir -p "$musicdir/import"

  if echo "$url" | grep -q 'bandcamp.com'; then
    # bandcamp music is organized by album:
    youtube-dl -x -i -o "$musicdir/import/%(uploader)s/%(album)s/%(title)s.%(ext)s" "$url"
  else
    youtube-dl -x -i -o "$musicdir/import/%(artist)s/%(title)s.%(ext)s" "$url"
  fi

  mpc update # re-index
}

del() { # delete the currently playing song
  location=$(mpc -f "%file%" | head -n 1)
  rm "$musicdir/$location"
  mpc next
  mpc update
}

usage() {
  echo "music options:"
  grep -E "^[A-Za-z_]+\(\) {.*#" "$0" | sed 's/() {//' | sort | while read -r line; do
    action=$(echo "$line" | sed 's/ #.*//')
    desc=$(echo "$line" | sed 's/.*# //')
    printf "%-10s : %s\n" "$action" "$desc"
  done
  exit 1
}

shuffle() { # reshuffle current selection from all
  mpc clear
  if [ -z "$*" ]; then
    mpc listall | sort -R | head -n 1000 | mpc add
  else
    append "$*"
  fi
  echo "shuffle" > "$current_playlist"
  mpc play
}

# is a file longer than 25 min
is_long() {
  milli=$(mediainfo --Inform="Audio;%Duration%" "$*" | sed 's/\..*//')
  if [ -z "$milli" ]; then
    return 1
  fi

  seconds=$(( $milli / 1000))
  if [ $seconds -gt $((60 * 25)) ]; then
    return 0
  else
    return 1
  fi
}

append() { # append some search term to the current playlist
  echo append "$*"

  if [ "$*" = "long_songs" ]; then
    cat "${musicdir}/long_songs"
    mpc listall | _is_long_filter | mpc add
  else
    mpc listall | grep -i "$*" | mpc add
  fi
}

remove() { # remove some search match from the playlist
  echo remove "$*"

  if [ "$*" = "long_songs" ]; then
    is_long_filter() {
      while read -r pos_song; do
	song=$(echo "$pos_song" | sed -E 's/[0-9]+ //')
	if is_long "${musicdir}/$song"; then
	  echo "$pos_song"
	fi
      done
    }
    positions="$(mpc playlist -f '%position% %file%' | is_long_filter | sed 's/ .*//')"
  else
    positions="$(mpc playlist -f '%position% %file%' | grep -i "$@" | sed 's/ .*//')"
  fi

  # positions="$(mpc playlist -f '%position% %file%' | grep -i "$@" | sed 's/ .*//')"
  delta=0
  for position in $positions; do
    mpc del $((position - delta))
    delta=$((delta + 1))
  done
}

now() { # fuzzy search for a song, play it now
  if song=$(mpc listall | fzf); then
    mpc insert "$song"
    mpc next
    mpc play
  fi
}

bl() { # blacklist the currently playing song from the current playlist.
  playlist="$(cat "$current_playlist")"
  songname="$(basename "$(mpc -f '%file%' | head -n 1)")"
  printf "\n-$songname" >> "$musicdir/playlist/$playlist"
  mpc next
}

playlist() { # select a search term based playlist to play
  if [ -z "$1" ]; then
    if ! target=$(ls "${musicdir}/playlist" | fzf); then
      return
    fi
  else
    target=$*
  fi

  echo "$target" >"$current_playlist"
  mpc clear
  while read -r line ; do
    case "${line:0:1}" in
      +) append "${line#?}";;
      -) remove "${line#?}";;
      *) ;;
    esac
    # the cat is so a newline is appended
  done < <(cat "$musicdir/playlist/$target"; echo)

  # clear duplicates
  # cf https://gist.github.com/hfs/1b7c120c07ce63cd9105ed59788a6915
  mpc playlist -f '%position%\t%file%' | sort -k 2 | perl -ne 'm/(.*)\t(.*)/; print "$1\n" if $2 eq $prev; $prev=$2' | mpc del

  mpc shuffle
  mpc play
}

infoname() {
  name=$(mpc -f '%title% - %artist%' | head -n 1)
  if [ "$name" = ' - ' ]; then
    name=$(basename "$(mpc -f '%file%' | head -n 1)")
    name=${name%.*}
  fi
  echo "$name"
}

info() { # display the current song progress bar and playlist length
  infoname

  length=$(wc -L <<< "$name")
  percent=$(mpc | awk 'match($0,/([0-9]+)%/, groups) {print groups[1]}')
  "$HOME/.wm/panel/tools/mkb" $percent $length
  echo "playlist: $(cat $current_playlist) | $(playlist_length)"
}

op=${1:-usage}
shift
$op "$*"
