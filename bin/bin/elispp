#!/usr/bin/env bb
;; call emacs in various ways
;; coupled to my emacs.d
;; unfortunately this is slightly slower than the sh version ("doing nothing"
;; takes 80ms vs 35ms on this 2020 mbp)

(ns elisp
  (:require [babashka.fs :as fs]
            [babashka.process :as p]
            [clojure.string :as string]
            [clojure.tools.cli :as cli]
            [clojure.java.shell :as shell]
            [lib.util :refer [sh shh has? home stderr]]))

(when (System/getenv "CALLED_FROM_EMACS")
  ;; todo: report something here?
  (stderr "CALLED_FROM_EMACS set, doing nothing")
  (sh "notify-send" "elispp: CALLED_FROM_EMACS set, doing nothing")
  (System/exit 0))

(def verbose? nil)
(def EXIT-CODE 1)

(def cli-options
  [["-t" "--timeout TIMEOUT" "set timeout"]
   ["-r" "--raw" "trim the output string"]
   ["-q" "--quiet" "do not print the result of sexp"]
   ;; todo
   ["-f" "--function" "call a function with script args as function args"]
   ["-b" "--batch" "run lisp in batch mode"]
   ["-w" "--window" "run lisp in batch mode with a window"]
   ["-v" "--verbose" "verbose mode"]
   ["-h" "--help" "print usage"]])

(defn trunc [s n]
  (subs s 0 (min (count s) n)))

(defn vlog [& xs]
  (and verbose? (stderr (trunc (apply pr-str xs) 200))))

(defn usage []
  (->> cli-options
       (map #(string/join " " (take 3 %)))
       (string/join "\n")
       (println))
  (System/exit 0))

;; <2025-05-19 Mon 13:36> can't remember what the thought was with extra-args, it just breaks things
(defn run-elisp [options lisp extra-args]
  (let [batch? (:batch options)
        window? (:window options)
        cmd (cond batch? ["emacs" "--batch" "-l" (home ".emacs.d/init.el")]
                  window? ["emacs" "--debug-init"]
                  :else ["emacsclient" "--eval" (str lisp)])
        ;; cmd (vec (concat cmd extra-args))
        timeout (or (:timeout options) 4)
        cmd (if-not (has? "timeout") cmd
                    (vec (apply list "timeout" (str timeout) cmd)))]
    (vlog "options:" options)
    (vlog "cmd:" cmd)
    (vlog "lisp (next-line):")
    (when verbose? (stderr lisp))
    ;; (println cmd)
    (let [result-cmd (eval `(shell/sh ~@cmd
                                      :env ~(merge (into {} (System/getenv))
                                                   (and (or batch? window?) {"NS_EMACS_BATCH" lisp})
                                                   (and window? {"NS_REDIR_LOG" "true"}))))
          timed-out? (= 124 (:exit result-cmd))
          result (if timed-out?
                   (do (sh "notify-send" "elispp: timed out")
                       "TIMED_OUT")
                   (if-not (or batch? window?)
                     (:out result-cmd)
                     (->> (:err result-cmd)
                          (string/split-lines)
                          (keep (fn [line]
                                  (when-not (string/blank? line)
                                    (if (string/starts-with? line "\"")
                                      (subs line 1 (dec (count line)))
                                      line))))
                          (string/join "\n"))))
          err? (string/includes? (:err result-cmd) "*ERROR*")

          result-raw (if (= "nil" result)
                       ""
                       (if-not batch? (string/trim result)
                               (->> result
                                    (string/split-lines)
                                    (drop-while (complement #{"COOL_DELIMITER"}))
                                    (rest)
                                    (string/join "\n"))))

          result-raw (condp = (first result-raw)
                       \" (read-string result)
                       \( (subs result-raw 1 (dec (count result-raw)))
                       result-raw)
          ]
      (vlog "result: " result-cmd)
      ;; (println "arst" options result-raw result)
      (when-not (:quiet options)
        (println (if (:raw options)
                   result-raw
                   result)))
      (and err? (println (:err result-cmd)))
      (def EXIT-CODE (if (or timed-out? (#{"nil" ""} result-raw))
                       1 0)))))

(defn script-str [s]
  ;; ...
  (if (string? s)
    (let [pr (pr-str s)]
      (format "\\%s\\\"" (subs pr 0 (dec (count pr)))))
    (pr-str s)))

;; cf https://github.com/thiagokokada/babashka/blob/master/examples/is_tty.clj
(defn- is-tty
  [fd key]
  (-> ["test" "-t" (str fd)]
      (p/process {key :inherit :env {}})
      deref
      :exit
      (= 0)))

(defn in-is-tty? [] (is-tty 0 :in))

(when (= *file* (System/getProperty "babashka.file"))
  (let [stdin (when-not (in-is-tty?)
                (string/join "\n" (line-seq (clojure.java.io/reader *in*))))
        stdin-file (cond (nil? stdin) nil
                         (fs/exists? "/dev/shm/") (str "/dev/shm/elisp"  (int (* (rand) 1000000)))
                         (fs/exists? "/Volumes/RAMDisk/") (str "/Volumes/RAMDisk/" (int (* (rand) 1000000)))
                         :else (shh "mktemp"))
        _ (and stdin (spit stdin-file stdin))
        cwd (System/getProperty "user.dir")]
    (try
      (if (fs/exists? (first *command-line-args*))
        (let [file (first *command-line-args*)
              options (some->> (slurp file)
                               (string/split-lines)
                               (filter #(string/starts-with? % ";; elisp-opts:"))
                               (first))
              {:keys [options errors arguments]} (and options
                                                      (cli/parse-opts (string/split (or (second (string/split options #":")) "")
                                                                                    #"[ ]+")
                                                                      cli-options))
              script-options {:raw true :timeout 30}]
          (def verbose? (:verbose options))
          ;; (def verbose? true)
          (run! stderr errors)
          (run-elisp (merge script-options options)
                     (format "(->> %s f-read (format \"(let ((*command-line-args* %s) (*stdin-file* %s) (default-directory %s)) %%s)\") read eval)"
                             (pr-str file)
                             (format "'(%s)" (string/join " " (map script-str (rest *command-line-args*))))
                             (script-str stdin-file)
                             (script-str cwd))
                     arguments))
        (let [{:keys [options errors arguments]} (cli/parse-opts *command-line-args* cli-options)
              [lisp & extra-args] arguments
              lisp (format "(let ((*stdin-file* %s) (default-directory %s)) %s)" (pr-str stdin-file) (pr-str cwd) (or lisp "nil"))]
          (def verbose? (:verbose options))
          (run! stderr errors)
          (when (:help options) (usage))
          (run-elisp options lisp extra-args)))
      (catch Exception e
        (stderr (str "caught exception: " (.getMessage e))))
      (finally
        (and stdin (fs/delete stdin-file))
        (System/exit EXIT-CODE)))))
