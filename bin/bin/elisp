#!/bin/sh
# provide a way to run elisp in a running emacs-server
# can act as a shebang (ie #!/usr/bin/env elisp) or
# adhoc code (ie elisp '(message "uwu")')
# note: when args are passed to a shebang, they are available with the variable 'ns-args' as a list

trim=false  # note: we always set trim in script mode
quiet=false
read_stdin=false
emacs_batch=false

while getopts qrsb flag; do
    case $flag in
        q) quiet=true;;
        r) trim=true;;
        s) read_stdin=true;;
        b) emacs_batch=true;;
        *) usage;;
    esac
done
shift $((OPTIND-1))

if [ -f "$1" ]; then
    script_name=$(realpath "$1")
    shift
fi

eclient="emacsclient"

# this check is fairly heavy for time-to-eval -- would rather uncomment this if I find myself on windows later
# (sorry potential future me)
# if uname | grep -qE '(MINGW|MSYS)'; then
#     # windows
#     eclient="${eclient}w --server-file ${HOME}/.emacs.d/server/${EMACS_SERVER_FILE:-emacs-server-file}"
# fi

add_stdin() {
    if [ -d /dev/shm/ ]; then
	stdin_file=/dev/shm/elisp-${RANDOM}
    else
	stdin_file=$(mktemp)
    fi

    cat - > "$stdin_file"
}

if [ -z "$script_name" ]; then
    elisp_timeout=${elisp_timeout:-1}
    lisp="(progn $@)"
    if $read_stdin; then
	add_stdin
	lisp="(let ((*stdin-file* \"${stdin_file}\")) ${lisp})"
    fi
else
    trim=true
    elisp_timeout=${elisp_timeout:-15} # arbitrary

    # absolutely awful
    conf=$(sed -n '2p' "$script_name")
    # echo "$conf"
    case "$conf" in
	*elisp-eval:*) eval "$(echo "$conf" | sed 's/.*://')"
    esac

    # shell -> elisp
    args=
    for a in "$@"; do
	args="${args} \\\"${a}\\\""
    done
    args="(${args})"

    script_name="\"${script_name}\""

    if $read_stdin; then
	add_stdin
	stdin_file_lisp="\\\"${stdin_file}\\\""
    else
	stdin_file_lisp=nil
    fi

    lisp="(->> ${script_name} f-read (format \"(let ((*stdin-file* ${stdin_file_lisp}) (ns-args '${args})) %s)\") read eval)"
fi

emacs_timeout=
if type timeout >/dev/null; then
    emacs_timeout="timeout ${elisp_timeout}"
fi

if $emacs_batch; then
    result=$(NS_EMACS_BATCH=$lisp emacs --script "${HOME}/.emacs.d/init.el" 2>&1 | grep -v '^Loading.*\.\.\.$')

    # NS_EMACS_BATCH=$lisp emacs --script "${HOME}/.emacs.d/init.el" 2>&1
    # exit 0
else
    # echo $emacs_timeout $eclient --eval "$lisp"
    result=$($emacs_timeout $eclient --eval "$lisp")
fi

quit() {
    if [ ! -z "$stdin_file" ]; then
	if [ -f "$stdin_file" ]; then
	    rm "$stdin_file"
	fi
    fi

    exit ${*:-1}
}

if [ $? -eq 1 ]; then
    # we could not reach emacs, or we timed out.

    # if we were running a script, try to save by defaulting to last arg
    if [ ! -z "$script_name" ]; then
	while [ ! -z "$*" ]; do
	    last=$1
	    shift
	done
	echo "$last"
    fi

    quit 1
fi

if ! $quiet; then
    if [ "$result" = "nil" ]; then
	result=
    fi

    if $trim; then
	case "$result" in
	    # (1 2 3) -> # 1 2 3
	    "("*) result=${result:1:${#result}-2}; echo "$result";;
	    # "\"~/.dotfiles/bin/bin/elisp\n~/.emacs.d/recentf\""
	    #     -> "~/.dotfiles/bin/bin/elisp$'\n'~/.emacs.d/recentf"
	    '"'*) result=${result:1:${#result}-2}
		  result=$(echo "$result" | sed 's/%/%%/g')
		  # replace
		  printf "$result"
		  echo
		  ;;
	    # just print it
	    *) echo "$result" ;;
	esac
    else
	echo "$result"
    fi
fi

if [ -z "$result" ] || [ "$result" = '""' ]; then
    quit 1
else
    quit 0
fi

