#!/usr/bin/env bash
# provide a way to run elisp in a running emacs-server
# can act as a shebang (ie #!/usr/bin/env elisp) or
# adhoc code (ie elisp '(message "uwu")')
# note: when args are passed to a shebang, they are available with the variable 'ns-args' as a list

if [ ! -z "$CALLED_FROM_EMACS" ]; then
    exit 1
fi

set -o pipefail

# todo: some way to say: with current buffer (from shell mode)
# notify-send "$*"

trim=false  # note: we always set trim in script mode
quiet=false
read_stdin=false
emacs_batch=false
emacs_batch_window=false
verbose=false

while getopts qrsbvwt:n: flag; do
    case $flag in
        q) quiet=true;;
        r) trim=true;;
        s) read_stdin=true;;
        b) emacs_batch=true;;
        n) emacs_server_file=$OPTARG;;
	t) elisp_timeout=$OPTARG;;
	v) verbose=true;;
        w) emacs_batch_window=true;;
        *) usage;;
    esac
done
shift $((OPTIND-1))

if [ -f "$1" ]; then
    script_name=$(realpath "$1")
    shift
fi

eclient="emacsclient"

# this check is fairly heavy for time-to-eval -- would rather uncomment this if I find myself on windows later
# (sorry potential future me)
# if uname | grep -qE '(MINGW|MSYS)'; then
#     # windows
#     eclient="${eclient}w --server-file ${HOME}/.emacs.d/server/${EMACS_SERVER_FILE:-emacs-server-file}"
# fi

add_stdin() {
    if [ -d /dev/shm/ ]; then
	stdin_file=/dev/shm/elisp-${RANDOM}
    else
	stdin_file=$(mktemp)
    fi

    cat - > "$stdin_file"
}

quit() {
    if [ ! -z "$stdin_file" ]; then
	if [ -f "$stdin_file" ]; then
	    rm "$stdin_file"
	fi
    fi

    exit ${*:-1}
}

if [ -z "$script_name" ]; then
    if $emacs_batch_window || $emacs_batch; then
	elisp_timeout=${elisp_timeout:-60}
    else
	elisp_timeout=${elisp_timeout:-1}
    fi

    lisp="(progn $@)"
    if $read_stdin; then
	add_stdin
	lisp="(let ((*stdin-file* \"${stdin_file}\")) ${lisp})"
    fi
else
    trim=true
    elisp_timeout=${elisp_timeout:-15} # arbitrary

    # absolutely awful
    conf=$(sed -n '2p' "$script_name")
    # echo "$conf"
    case "$conf" in
	*elisp-eval:*) eval "$(echo "$conf" | sed 's/.*://')"
    esac

    # shell -> elisp
    args=
    for a in "$@"; do
	args="${args} \\\"${a}\\\""
    done
    args="(${args})"

    script_name="\"${script_name}\""

    if $read_stdin; then
	add_stdin
	stdin_file_lisp="\\\"${stdin_file}\\\""
    else
	stdin_file_lisp=nil
    fi

    lisp="(->> ${script_name} f-read (format \"(let ((*stdin-file* ${stdin_file_lisp}) (ns-args '${args})) %s)\") read eval)"
fi


# notify-send "$elisp_timeout $*"
emacs_timeout=
if type timeout >/dev/null 2>&1; then
    emacs_timeout="timeout ${elisp_timeout}"
fi

filter_batch_lines() {
    # remove loading junk
    while read -r line; do
	case "$line" in
	    :*) ;;
	    'Loading '*) ;;
	    'Building '*) ;;
	    *) printf '%s\n' "$line" ;;
	esac
    done
}

if $emacs_batch_window; then
    export NS_REDIR_LOG=true
    export NS_EMACS_BATCH=$lisp
    result=$($emacs_timeout xvfb-run emacs --debug-init 2>&1 | tee /dev/stderr | awk 'NF' | filter_batch_lines)
    # result=$($emacs_timeout emacs --debug-init 2>&1 | tee /dev/stderr | awk 'NF' | filter_batch_lines)
    ret=$?

    if $trim; then
	result=$(printf '%s' "$result" | sed -n '/COOL_DELIMITER/{n;p}')
    fi
elif $emacs_batch; then
    export NS_EMACS_BATCH=$lisp
    result=$($emacs_timeout emacs --batch -l "${HOME}/.emacs.d/init.el" 2>&1 | filter_batch_lines)
    ret=$?

    if $trim; then
	result=$(printf '%s' "$result" | sed -n '/COOL_DELIMITER/{n;p}')
    fi
else
    # echo $emacs_timeout $eclient --eval "$lisp"
    if [ -z "$emacs_server_file" ]; then
	if $verbose; then
	    echo $emacs_timeout $eclient --eval "$lisp"
	fi
	result=$($emacs_timeout $eclient --eval "$lisp")
    else
	result=$($emacs_timeout $eclient --server-file=$emacs_server_file --eval "$lisp")
    fi
    ret=$?
fi

if [ "$ret" -ne 0 ]; then
    # we could not reach emacs, or we timed out.

    # if we were running a script, try to save by defaulting to last arg
    if [ ! -z "$script_name" ]; then
	while [ ! -z "$*" ]; do
	    last=$1
	    shift
	done
	echo "$last"
    fi

    quit "$ret"
fi

if [ "$result" = "nil" ]; then
    result=
fi

if $trim; then
    case "$result" in
	# (1 2 3) -> # 1 2 3
	"("*) result=${result:1:${#result}-2}; echo "$result";;
	# "\"~/.dotfiles/bin/bin/elisp\n~/.emacs.d/recentf\""
	#     -> "~/.dotfiles/bin/bin/elisp$'\n'~/.emacs.d/recentf"
	'"'*) result=${result:1:${#result}-2}
		result=$(echo "$result" | sed 's/%/%%/g')
		printf -- "$result"
		echo
		;;
	# just print it
	*) echo "$result" ;;
    esac
else
    if ! $quiet; then
	echo "$result"
    fi
fi

if [ -z "$result" ] || [ "$result" = '""' ]; then
    quit 1
else
    quit 0
fi

