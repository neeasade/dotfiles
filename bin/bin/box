#!/usr/bin/env bb

(require '[clojure.string :as string])

(defn conf-to-border [conf]
  (let [confs (string/split conf #" ")
        [side-conf corner-conf] (map (fn [s] (map first (re-seq #"(U?)." s)))
                                     confs)
        expand #(if (= 1 (count %))
                  (repeat 4 (first %))
                  %)]
    (zipmap [:top :right :bottom :left :top-left :top-right  :bottom-right :bottom-left]
            (concat
             (expand side-conf)
             (expand corner-conf)))))

(def border (conf-to-border "-|-| /\\/\\"))

(when-let [conf (System/getenv "BORDER")]
  (if-not (string/blank? conf)
    (def border (conf-to-border conf))))

(let [{:keys [right left top bottom top-left bottom-left top-right bottom-right ]} border
      lines (string/split (slurp *in*) #"\n")
      lines (map (fn [line] (str " " line " ")) lines)
      width (->> (conj lines)
                 (sort-by count)
                 (last)
                 (count))
      top-middle (repeat (- (/ width (count top))
                            ;; (dec (count top-left))
                            (dec (count top-right)))
                         top)
      top-line (apply str `(~top-left ~@top-middle ~top-right))
      bottom-line (apply str `(~bottom-left ~@(repeat (/  width (count bottom)) bottom) ~bottom-right))

      ;; width (+ width (+ (* 2 (dec (count top-left)))))
      ]

  (println top-line)
  (->> lines
       (map (partial format (format "%s%%-%ss%s" left width right)))
       (run! println))
  (println bottom-line))
