#!/usr/bin/env bb

(require '[clojure.string :as string])

(defn conf-to-border [conf]
  (let [[side-conf corner-conf] (string/split conf #" ")
        sides (if (= 1 (count side-conf))
                (apply str (repeat 4 side-conf))
                side-conf)
        corners (if (= 1 (count corner-conf))
                  (apply str (repeat 4 corner-conf))
                  corner-conf)]
    (->> `[~@sides ~@corners]
         (interleave [:top :right :bottom :left :top-left :top-right  :bottom-right :bottom-left])
         (partition 2)
         (map vec)
         (into {}))))

(def border (conf-to-border "-|-| /\\/\\"))

(when-let [conf (System/getenv "BORDER")]
  (if-not (string/blank? conf)
    (def border (conf-to-border conf))))

(let [lines (string/split (slurp *in*) #"\n")
      width (->> lines
                 (sort-by count)
                 (last)
                 (count))
      {:keys [right left top bottom top-left bottom-left top-right bottom-right ]} border
      top-line (apply str `(~top-left ~@(repeat width top) ~top-right))
      bottom-line (apply str `(~bottom-left ~@(repeat width bottom) ~bottom-right))]
  (println
   (string/join "\n"
                `(~top-line
                  ~@(map
                     (fn [line]
                       (let [padded-line (format (format "%%-%ss" width)
                                                 line)]
                         (str left padded-line right)))
                     lines)
                  ~bottom-line))))
