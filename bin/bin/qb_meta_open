#!/bin/sh
# switch to tab with $url or open $url
# if no url found, goto or open qutebrowser window

url=$1

. "${HOME}/.sh.d/environment"

vanilla() {
    if [ -z "$url" ]; then
	if ! pgrep qutebrowser; then
	    # wayland, force software render
	    if [ -z "$WAYLAND_DISPLAY" ]; then
		qutebrowser
	    else
		# this is really only needed with nouveu
		LIBGL_ALWAYS_SOFTWARE=1 qutebrowser
	    fi
	    exit 0
	fi
    else
	# this is faster than
	# qutebrowser "$url"
	qb_command ":open -t $url"
    fi


    find_class qutebrowser
    exit 0
}

if ! pgrep qutebrowser; then
    vanilla
fi

if [ -z "$url" ]; then
    vanilla
fi

# this is probably more like xdg-open logic
# if echo "$url" | grep -qE "youtu.be|youtube.com"; then
#     # there is a delay before window launch, so let me know now:
#     notify-send "launching in MPV"
#     # todo: this isn't teneble unless you copy to clip or something as well, to share I think
#     mpv "$url"
#     exit 0
# fi

if echo "$url" | grep -qE "bandcamp.com"; then
    # if qutebrowser gets mpris support this can go away
    google-chrome-stable "$url"
    exit 0
fi

# all the open urls (last in history is the current viewed thing)
if ! qb_session_dump | yq -r '.windows[0].tabs[] | .history[-1] | .url' | grep -q "$url"; then
    vanilla
fi

# do the same thing as above, but compare the url, grabbing the title (we use title text to switch to tab)
# matching_title=$(qb_session_dump | yq -r '.windows[0].tabs[] | .history[-1] | select(.url == "'"${url}"'") | .title' | head -n 1)
matching_title=$(qb_session_dump | yq -r '.windows[0].tabs[] | .history[-1] | select(.url | startswith("'"${url}"'")) | .title' | head -n 1)

if [ -z "$matching_title" ]; then
    echo no found title
    vanilla
fi

qb_command ":tab-select $matching_title"
find_class qutebrowser
