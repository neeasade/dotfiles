#!/usr/bin/env bash
# Load themes for programs from current theme

. "$HOME/.sh.d/environment"

render() {
    template="$HOME/.dotfiles/wm/.templates/$1"
    dest="$HOME/$2"
    shift; shift
    mkdir -p "$(dirname "$dest")"
    theme "$@" -r "$template" > "$dest"
}

# stateful service reload
refresh() {
    service=$1
    always_start_service=${2:-false}
    if systemctl --user status "$service" >/dev/null || $always_start_service; then
       systemctl --user restart "$service"
    fi
}

load_bg_plain() {
  $(iif 'pgrep picom' h x)setroot -solid "$(theme -q color.normal.background)"
}
load_bg()      { eval "$(theme -q BG_COMMAND)" ;}
load_emacs()   { elisp -t 5 "(ns/load-theme '$(theme -q emacs.theme))" ;}
load_jgmenu()  { render jgmenu .config/jgmenu/jgmenurc -p color.weak ;}
load_kitty()   { render kitty .config/kitty/kitty.conf -p color.normal ;}
load_mintty()  { render mintty .minttyrc ;}
load_mpd()     { render mpd .config/mpd/mpd.conf -p mpd; refresh mpd ;}
load_panel()   { render i3blocks .config/i3blocks/config; refresh panel ;}
load_picom()   { render picom .config/picom.conf -p picom; refresh picom ;}
load_pywal()   { render pywal .cache/wal/theme.json; }
load_zathura() { render zathura .config/zathura/zathurarc -p colors.normal ;}
load_zeal()    { render zeal .config/Zeal/Zeal.conf ;}

load_xresources() {
    render Xresources .Xresources -p color.normal
    has xrdb && xrdb "$HOME/.Xresources"
}

load_bspwm() {
    bspwmrc=".config/bspwm/bspwmrc"

    if [ $(bspc config window_gap) -le 0 ]; then
	render bspwm "$bspwmrc" -p bspwm -e '{:bspwm.window-gap 0}'
    else
	render bspwm "$bspwmrc" -p bspwm
    fi

    chmod +x "$HOME/$bspwmrc"
    setsid "$HOME/$bspwmrc"
}

load_btag_borders() {
    elisp '(->> (list :primary :strings :assumed :faded)
  (--map (ns/make-border-color it))
  (--map (substring it 1))
  (-map-indexed (lambda (i c) (sh (format "btags set ^%s color %s" (+ 1 i) c)))))' 1>/dev/null
}

load_qutebrowser() {
    render qutebrowser .config/qutebrowser/colors.py -p qutebrowser
    render qute_css .config/qutebrowser/settings.css

    if $MAC; then
	qb_command ':config-source'
	return $?
    fi

    current_conf=$(bspc config ignore_ewmh_focus)
    bspc config ignore_ewmh_focus true
    qb_command ':config-source'
    # qb_command ':reload' # reload current page w/ css
    bspc config ignore_ewmh_focus "$current_conf"
}

load_gtk() {
    echo GTK: TODO
    return 0

    if ! render gtkrc .gtkrc-2.0; then
        target="$HOME/.themes/${THEME_NAME}_template"
        # mustache < $HOME/.dotfiles/templates/oomox > $target
	templum -o "$target" "$HOME/.dotfiles/templates/oomox"

        git_ensure oomox
        cd "$gitdest"
        "./change_color.sh" -o "$THEME_NAME" "$target"
    fi

    # icon color (ACYL)
    git_ensure acyl
    # $HOME/.icons/acyl/icon.sh "#$p_icon"

    # reload
    gtkrc-reload

    # set a place to reference active theme for newly launched GTK3 programs.
    echo "$THEME_NAME" > $HOME/.themes/ACTIVE_THEME
}

load_dunst() {
    b_window_gap=$(theme -q bspwm.window-gap)

    p_height=0

    if silent pgrep lemonbar; then
	p_height=$(theme -q panel.height)
    fi
    export d_offset=$((b_window_gap + p_height))

    mon_width=$(bspc query -T -m | jq .rectangle.width)
    export d_width=$(echo .22 \* $mon_width | bc | sed 's/\..*//')

    render dunstrc .config/dunst/dunstrc

    # always want to kill
    pkill dunst
    refresh dunst true
    # notify-send "dunst reloaded"
}

load_services() {
    pathmunge "$HOME/.dotfiles/wm/.wm/services/"

    # clean
    find "${HOME}/.config/systemd/user/" -type f -delete

    # running_services=$(systemctl --user list-units | awk '{print $1}' | grep '\.service' | sort)
    running_services=$(systemctl --user list-units  | grep -oE '[a-zA-Z_]+.service' | tr '\n' ' ')
    installed_services=$(systemctl --user list-unit-files | awk '{print $1}' | grep '\.service' | sort)

    # stop the in-memory services that have no service files associated
    for s in $running_services; do
    	if ! grep -q $s <<< "$installed_services"; then
    	    echo systemctl --user stop $s
    	    systemctl --user stop $s
    	fi
    done

    made_services=
    # note: service PATH is set to whatever PATH is when you call this script
    make_service() {
	echo "make_service $*"
	export service_name=$1
	export ExecStart=${2:-$1}
	export Description=${3:-$1}

	export REALKILL=$(which kill)
	export WAYLAND_DISPLAY=${WAYLAND_DISPLAY:-}

	# fully qualify executable:
	args=$(awk '{$1=""; print $0}' <<< "$ExecStart")
	target=$(awk '{print $1}' <<< "$ExecStart")
	export ExecStart="$(which $target) ${args}"

	render systemd_service .config/systemd/user/${service_name}.service

	made_services="${made_services} $service_name"
    }

    make_periodic_service() {
	export interval=$1
	shift

	make_service "$1" "$2"

	export Description="Timer for service ${1}"
	render systemd_timer ".config/systemd/user/${1}.timer"
    }

    make_periodic_service() {
	# todo: consider making this a systemd timer
	interval=$1
	shift
	make_service "$1" "periodically $interval $2" "$3"
    }

    make_periodic_service 60 temp_check "sensor_alert cpu_temp" "Notify when the cpu temp is high"
    make_periodic_service 30 memory_check "sensor_alert memory" "Notify when the memory pressure is high"
    make_periodic_service $((60 * 60 * 24)) update_adblock update_adblock

    if [ "$(hostname)" = "geloof" ]; then
	make_periodic_service 10 refresh_mpd refresh_mpd
	make_periodic_service 10 display_sync "laptop_monitor_sync" "Update displays on connection changes"
	make_periodic_service 90 battery_check "sensor_alert battery" "Notify when the battery is low"
    fi

    if [ "$(hostname)" = "erasmus" ]; then
	# todo: re-open ssh/vps conn

	make_periodic_service 120 sync_org_schedule sync_org_schedule
    fi

    make_service unclutter 'unclutter -idle 1'
    make_service dunst
    make_service picom
    make_service download_watch last_download_link

    # tray stuff
    make_service nm-applet
    make_service pasystray
    make_service stalonetray
    make_service blueman-applet

    make_service panel "$HOME/.wm/panel/lemonade"

    make_service mpd "og mpd --no-daemon"

    # reload units
    systemctl --user daemon-reload

    # start and enable our units
    for s in $made_services; do
	systemctl --user start $s
	systemctl --user enable $s
    done

    # just kidding
    systemctl --user disable panel
    systemctl --user disable stalonetray
}

load_wm() {
    # meta package (bspwm and dunst react to panel state)
    for x in panel bspwm dunst; do
	echo ":: load $x"
	load_$x
    done
}

if [ -z "$*" ]; then
    if $MAC; then
	# don't load bg by default because it kills dock
	# (which unminimizes windows)
	set -- xresources qutebrowser kitty
    elif $LINUX; then
	set -- wm xresources picom bg gtk qutebrowser zathura jgmenu zeal btag_borders kitty
    elif $WINDOWS; then
	set -- mintty
    fi
fi

case "$*" in
    bg*)  ;;
    *) vdo silent theme -c
esac

for conf in "$@"; do
    (
	result=$(
	    tmp=$(mktemp)
	    printf '::: %s: ' load_$conf
	    { time load_$conf >"$tmp" 2>&1 ; } 2>&1 | awk 'FNR==2{print $2}'
	    cat "$tmp"
	    rm "$tmp")
	printf '%s\n' "$result"
    ) &
done

wait
