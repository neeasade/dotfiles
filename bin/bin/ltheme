#!/usr/bin/env bash
# Load themes for programs from current theme

. "$HOME/.sh.d/environment"

render() {
    template="$HOME/.dotfiles/theming/templates/$1"
    dest="$HOME/$2"
    shift
    shift
    mkdir -p "$(dirname "$dest")"
    theme "$@" -r "$template" > "$dest"
}

load_bg()      { eval "$(theme -q BG_COMMAND)" ;}
load_emacs()   { elisp -t 5 "(ns/load-theme '$(theme -q emacs.theme))" ;}
load_jgmenu()  { render jgmenu .config/jgmenu/jgmenurc -p color.normal ;}
load_kitty()   { render kitty .config/kitty/kitty.conf -p color.normal ;}
load_mintty()  { render mintty .minttyrc ;}
load_mpd_win() { render mpd_windows .config/mpd/mpd.conf -p mpd ;}
load_pywal()   { render pywal .cache/wal/theme.json; }
load_xst()     { load_xresources; pkill -x --signal USR1 xst ;}
load_zathura() { render zathura .config/zathura/zathurarc -p colors.normal ;}
load_zeal()    { render zeal .config/Zeal/Zeal.conf ;}

load_tmux() {
    render tmux .tmux.conf
    pgrep tmux && tmux source-file "$HOME/.tmux.conf"
}

load_picom() {
    render picom .config/picom.conf -p picom
    systemctl --user restart picom
}

load_xresources() {
    render Xresources .Xresources -p color.normal
    has xrdb && xrdb "$HOME/.Xresources"
}

load_bspwm() {
    bspwmrc=".config/bspwm/bspwmrc"
    render bspwm "$bspwmrc" -p bspwm
    chmod +x "$HOME/$bspwmrc"

    wait # wait for lemonbar?
    setsid "$HOME/$bspwmrc"
}

load_mpd() {
    extra_toml=""
    if mount | grep "${HOME}/usb"; then
	extra_toml="mpd.music-dir = \"${HOME}/usb/Music\"
mpd.mpd-dir = \"${HOME}/.config/mpd_portable\""
    fi

    render mpd .config/mpd/mpd.conf -T "$extra_toml" -p mpd
    systemctl --user restart mpd
}

load_qutebrowser() {
    render qutebrowser .config/qutebrowser/colors.py -p qutebrowser
    render qute_css .config/qutebrowser/settings.css

    if $MAC; then
	qb_command ':config-source'
    else
	current_conf=$(bspc config ignore_ewmh_focus)
	bspc config ignore_ewmh_focus true
	qb_command ':config-source'
	# qb_command ':reload' # reload current page w/ css
	bspc config ignore_ewmh_focus "$current_conf"
    fi
}

load_lemonade() {
    echo TODO: lemonade
    # rm $HOME/.config/i3blocks/config

    # IFS=$'\n'

    # juicer_target=".config/i3blocks/config"

    # # note all lemons, generate them.
    # lemons=$(echo $p_format | tr ':|' ' ');

    # if ! margs juicer "$juicer_target"; then

    # 	. ripen
    # 	IFS=' '
    # 	parallel -P 0 "squeeze {}" ::: $lemons >> $HOME/$juicer_target
    # 	IFS=

    # 	[ ! -z "$cachefile" ] && cp "$HOME/$juicer_target" "$cachefile"
    # fi

    # if systemctl --user status panel >/dev/null; then
    # 	systemctl --user restart panel
    # fi
}

load_gtk() {
    echo GTK: TODO
    return 0

    if ! margs gtkrc .gtkrc-2.0; then
        target="$HOME/.themes/${THEME_NAME}_template"
        # mustache < $HOME/.dotfiles/templates/oomox > $target
	templum -o "$target" "$HOME/.dotfiles/templates/oomox"

        git_ensure oomox
        cd "$gitdest"
        "./change_color.sh" -o "$THEME_NAME" "$target"
    fi

    # icon color (ACYL)
    git_ensure acyl
    $HOME/.icons/acyl/icon.sh "#$p_icon"

    # reload
    gtkrc-reload

    # set a place to reference active theme for newly launched GTK3 programs.
    echo "$THEME_NAME" > $HOME/.themes/ACTIVE_THEME
}

load_dunst() {
    mon_width=$(bspc query -T -m | jq .rectangle.width)
    export d_width=$(echo .24 \* $mon_width | bc | sed 's/\..*//')

    p_height=$(theme -q panel.height)
    silent pgrep lemonbar || p_height=0
    export d_offset=$((b_window_gap + p_height))

    render dunstrc .config/dunst/dunstrc

    # pkill dunst
    # dunst will auto-launch on notify-send call
    systemctl --user stop dunst
    pkill dunst
    systemctl --user start dunst
}

load_services() {
    echo TODO: services
    return
    # clean
    find ${HOME}/.config/systemd/user/ -type f -delete

    # running_services=$(systemctl --user list-units | awk '{print $1}' | grep '\.service' | sort)
    running_services=$(systemctl --user list-units  | grep -oE '[a-zA-Z_]+.service' | tr '\n' ' ')
    installed_services=$(systemctl --user list-unit-files | awk '{print $1}' | grep '\.service' | sort)

    # stop the in memory services that have no service files associated
    for s in $running_services; do
    	if ! grep -q $s <<< "$installed_services"; then
    	    echo systemctl --user stop $s
    	    systemctl --user stop $s
    	fi
    done

    made_services=
    # note: service PATH is set to whatever PATH is when you call this script
    # todo: some sort of validation -- don't make service files for executables you don't have maybe
    make_service() {
	export service_name=$1
	export ExecStart=${2:-$1}
	export Description=${3:-$1}

	# fully qualify executable:
	args=$(awk '{$1=""; print $0}' <<< "$ExecStart")
	target=$(awk '{print $1}' <<< "$ExecStart")
	export ExecStart="$(which $target) ${args}"

	margs systemd_service .config/systemd/user/${service_name}.service

	made_services="${made_services} $service_name"
    }

    make_periodic_service() {
	interval=$1
	shift

	make_service "$1" "$2"

	export Description="Timer for service ${1}"
	margs systemd_timer ".config/systemd/user/${1}.timer"
    }

    make_periodic_service 60 temp_check "sensor_alert cpu_temp" "Notify when the cpu temp is high"
    make_periodic_service 30 memory_check "sensor_alert memory" "Notify when the memory pressure is high"
    make_periodic_service $((60 * 60 * 24)) update_adblock update_adblock

    if [ "$(hostname)" = "geloof" ]; then
	make_periodic_service 10 refresh_mpd refresh_mpd
	make_periodic_service 10 display_sync "laptop_monitor_sync" "Update displays on connection changes"
	make_periodic_service 90 battery_check "sensor_alert battery" "Notify when the battery is low"
    fi

    if [ "$(hostname)" = "erasmus" ]; then
	# TODO: this should move to ssh config
	make_periodic_service 10 vps_connect "periodically -p 10 ssh -tt -R 22222:localhost:22 neeasade@vps.neeasade.net"
	# ssh -t vps.neeasade.net 'ssh localhost -p 22222'

	make_periodic_service 120 sync_org_schedule sync_org_schedule
    fi

    make_service unclutter 'unclutter -idle 1'
    make_service dunst
    make_service picom
    make_service download_watch last_download_link

    # tray stuff
    make_service nm-applet
    make_service pasystray
    make_service stalonetray
    make_service blueman-applet

    make_service panel "$HOME/.wm/panel/lemonade"

    # todo: correct lemon mpd naming conflict
    make_service mpd "/run/current-system/sw/bin/mpd --no-daemon $HOME/.config/mpd/mpd.conf"

    # reload units
    systemctl --user daemon-reload

    # start and enable our units
    for s in $made_services; do
	systemctl --user start $s
	systemctl --user enable $s
    done

    # just kidding
    systemctl --user disable panel
    systemctl --user disable stalonetray
}

load_btag_borders() {
    elisp "(defun ns/make-border-color (label)
  (--> (ht-get tarp/theme label)
    (ct-iterate it 'ct-pastel
      (lambda (c)
        (> (ct-name-distance it c) 20)))
    (ct-iterate it 'ct-lab-lighten
      (lambda (c) (ct-is-light-p c 75)))))"

    elisp '(->> (list :primary :strings :assumed :alt)
  (-map (lambda (l) (ns/make-border-color l)))
  (-map (fn (substring <> 1)))
  (-map-indexed (fn (ns/shell-exec (format "btags set ^%s color %s" (+ 1 <1>) <2>)))))'
}

if [ -z "$*" ]; then
    if $MAC; then
	set -- tmux xresources qutebrowser kitty
    elif $LINUX; then
	set -- picom tmux xresources bspwm bg gtk dunst qutebrowser zathura jgmenu zeal btag_borders xst
    elif $WINDOWS; then
	set -- mintty mpd_win tmux
    fi
fi

targets=$*
for conf in "$@"; do
    (
	result=$(
	    tmp=$(mktemp)
	    printf '::: %s: ' load_$conf
	    { time load_$conf >"$tmp" 2>&1 ; } 2>&1 | awk 'FNR==2{print $2}'
	    cat "$tmp"
	    rm "$tmp")
	printf '%s\n' "$result"
    ) &
done

wait
