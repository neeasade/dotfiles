#!/bin/sh
# switch between a laptop or connected display
# won't do anything if the desired state is already set, so can be called periodically
# call with resolution if you wish to change it (see xrandr for available resolutions and display names)

# get these from xrandr
external_monitor=HDMI-1
laptop_monitor=LVDS-1

turn_on() {
    display=$1
    res=$2

    echo setting $display to $res

    xrandr --output $display --primary \
	   --mode $res \
	   --pos 0x0 \
	   --rotate normal

    did_something=true
}

# calling this takes a whole 200ms!
xrandr=$(xrandr)

if echo "$xrandr" | grep -q "${external_monitor} connected"; then
    on_monitor=$external_monitor
    off_monitor=$laptop_monitor
else
    on_monitor=$laptop_monitor
    off_monitor=$external_monitor
fi

# example turned on:
#     HDMI-1 connected primary 1360x768+0+0
#     HDMI-1 connected 1360x768+0+0
# example turned off:
#     HDMI-1 connected
#     HDMI-1 disconnected
on_monitor_status=$(echo "$xrandr" | grep -E "^${on_monitor}" | sed -E 's/\(.*//')
off_monitor_status=$(echo "$xrandr" | grep -E "^${off_monitor}" | sed -E 's/\(.*//')
on_field_count=$(echo "$on_monitor_status" | awk '{print NF}')
off_field_count=$(echo "$off_monitor_status" | awk '{print NF}' )

max_res=$(echo "$xrandr" | grep -A 1 $on_monitor | tail -n 1 | awk '{print $1}')
target_res=${1:-$max_res}

# order matters -- don't leave yourself without any display or the display-manager service will kick
did_something=false

if [ $on_field_count -eq 2 ]; then
    # it's turned off
    turn_on $on_monitor $target_res
else
    # check that the resolution matches up
    current_resolution=$(echo "$on_monitor_status" | awk '{print $NF}' | grep -Eo '[0-9]+x[0-9]+')
    if [ ! "$target_res" = "$current_resolution" ]; then
	turn_on $on_monitor $target_res
    fi
fi

# does the field end in a resolution
if echo "$off_monitor_status" | grep -qE '[0-9]+x[0-9]+'; then
    echo "turning $off_monitor off"
    xrandr --output $off_monitor --off
    did_something=true
fi

# hack -- set both displays to the laptops max res
if [ "$*" = "mirror" ]; then
    max_res=$(echo "$xrandr" | grep -A 1 $laptop_monitor | tail -n 1 | awk '{print $1}')

    turn_on $laptop_monitor $max_res
    # sometimes you can't find the same res on the external display, so this might fail lmao
    # it will be OK, just that laptop view will be trimmed/not show the whole story
    turn_on $external_monitor $max_res
    did_something=true
fi

if $did_something; then
    # remove any bspwm defaults that may have been created with the new monitor
    for did in $(bspc query -T -m | jq '.desktops[] | select(.name == "Desktop") | .id'); do
	bspc desktop -r $did
    done

    # reset our monocle measurement
    "$HOME/.config/bspwm/bspwmrc"

    echo "did something, updating dmenu/dunst"
    theme refresh dmenu_options
    theme refresh dunst

    # todo: if it's only the laptop now, switch sxhkd
    # or vice versa
    xbright
fi
