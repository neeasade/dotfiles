#!/bin/sh

. ~/.sh.d/environment

# take a tiled image, tint the colors, set the wallpaper

image_colors() {
    # todo: improve on this (kmeans or something else)
    # right now just dumping everything most to least seen
    # anticipate this being really slow above smol images

    echo "getting colors..." >&2
    convert "$1" -alpha off txt:- | awk '{print $3}' | rg -v pixel | sort -rn | uniq -c | awk '{print $2}'
    echo "getting colors... done" >&2
}

rand_tile() {
    # echo "/media/LIVEWIRE/Archive/other/squidd/pattern_125.gif"

    # echo /home/neeasade/Downloads/upfeathers/out.png
    (
	# cat /tmp/result_source.txt

	# rg --files "$HOME/pngsave"

	# rg --files /media/LIVEWIRE/Archive/other/squid/
	# rg --files /media/LIVEWIRE/Archive/other/bgrepeat/

	# rg --files "$HOME/git/SubtlePatterns/"

	# rg --files /home/neeasade/git/tiles-and-such
	# # rg --files "/home/neeasade/git/tiles-and-such/[J] Retro Patterns/"

	rg --files /home/neeasade/git/neeasade.github.io/published/assets/posts/ca_dump
	rg --files /home/neeasade/git/neeasade.github.io/published/assets/posts/ca_dump2
    ) | sort -R | head -n 1

}

target=$(rand_tile)

# if ! silent identify "$target"; then
#     target=$(rand_tile)
# fi
# if ! silent identify "$target"; then
#     target=$(rand_tile)
# fi

silent theme -c
background=$(theme -q color.focused.background)
foreground=$(theme -q color.normal.assumed)

foreground=$(theme -q color.normal.background)
background=$(elisp -r "(ns/make-border-color :assumed)")
# background=$(theme -q color.normal.assumed)

# pastelish
# background=$(elisp -r "(ns/make-border-color :alt)")
# foreground=$(elisp -r "(ns/make-border-color :assumed)")
# foreground=$(elisp -r "(ns/make-border-color :primary)")

# target='/home/neeasade/git/tiles-and-such/Solaris & CDE/solaris-raw-bitmaps/SolarisLogo.pm'

cat<<EOF > /tmp/result_source.txt
$target
background: $background
foreground: $foreground
EOF

rm /tmp/result.png

# convert "$target" -fuzz "0%" -fill \#$background -opaque "$(most_seen "$target")" /tmp/result.png
# convert "/tmp/result.png" -fuzz "1%" -fill \#$foreground -opaque "$(least_seen "$target")" /tmp/result.png
# foreground=D7CDFF
# background=D7CDFF
# background=$(theme getval background)

cp "$target" /tmp/result.png

colors=$(image_colors "$target")

most_seen=$(echo "$colors" | head -n 1)
least_seen=$(echo "$colors" | tail -n 1)

color() {
    echo "fuzz fg: $most_seen -> $foreground at ${1}%"
    echo "fuzz bg: $least_seen -> $background at ${2}%"
    convert "/tmp/result.png" -fuzz "${1}%" -fill "$foreground" -opaque "$most_seen" /tmp/result.png
    convert "/tmp/result.png" -fuzz "${2}%" -fill "$background" -opaque "$least_seen" /tmp/result.png
}

# if we see a lot of colors, up the fuzz
distance=$(elisp -r "(round (ct-distance \"${least_seen}\" \"${most_seen}\"))")

echo "colors seen: ${#colors}"
echo "distance most/least seen: $distance"

auto() {
    if [ "$distance" -lt 10 ]; then
       color 2 4
       return
    fi

    if [ ${#colors} -gt 50 ]; then
	color 8 12
    else
	color 4 6
    fi
}

# fuzz percentage fg bg
# color 10 22
# color 18 30
# color 6 4
# color 2 2
auto


vdo convert /tmp/result.png -resize 120% /tmp/result.png

echo "$target"
feh --bg-tile /tmp/result.png || "$0"
