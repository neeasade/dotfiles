#!/usr/bin/env bb
;; mimetype preferences

(ns open-meta
  (:require [babashka.fs :as fs]
            [babashka.process :as process]
            [clojure.java.shell :as shell]
            [clojure.string :as string]
            [lib.util :as lib]))

(defn sh [& args]
  (apply println args)
  (try
    (apply process/shell args)
    (catch Throwable e
      (lib/stderr "open: something went wrong"))))

(defn act [opener file]
  (if (fn? opener)
    (opener file)
    (sh (or opener
            (last (fs/which-all "open"))
            (last (fs/which-all "xdg-open")))
        file)))

;; todo: archives, folders - dired/unzip tempdir
;; todo: if it's youtube, open in chrome? sponsorblock
(def BROWSER (System/getenv "BROWSER"))
(def EDITOR (System/getenv "EDITOR"))

(defn open-archive []
  (lib/stderr "archive: not implemented")
  (sh "notify-send"  "archive: not implemented"))

(def part1_rules
  {"image" "feh"
   "text"  EDITOR
   "video" ["mpv" "vlc"]
   "audio" "vlc"})

(def part2_rules
  {"html" BROWSER
   "directory" ["thunar"]
   "rfc822" BROWSER                     ; mhtml
   "java-archive" (partial sh "java" "-jar")
   "vnd.microsoft.portable-executable" (partial sh "steam-run" "wine")
   "pdf" ["okular" "zathura" "preview" BROWSER]
   "zip" open-archive
   "x-7z-compressed" open-archive
   "gzip" open-archive
   "rar" open-archive
   })

(defn open-file [file]
  (let [mimetype (lib/shh "file" "--mime-type" "-b" (str (fs/real-path file)))
        [part1 part2] (string/split mimetype #"/")
        opener (some->> (list (part2_rules part2) (part1_rules part1))
                        (remove nil?)
                        (flatten)
                        (filter (fn [exec]
                                  (or (fn? exec)
                                      (fs/which exec))))
                        first)]
    (act opener file)))

(defn open-scheme [arg]
  (let [[_ scheme value] (first (re-seq #"([a-zA-Z]+)://(.*)" arg))]
    (println "scheme: " scheme)
    (condp = scheme
      "file" (open-file value)
      "https" (sh BROWSER value)
      "http" (sh BROWSER value)
      (act nil value))))

(let [arg (string/join " " *command-line-args*)]
  (cond
    (fs/exists? arg) (open-file arg)
    (re-seq #"([a-zA-Z]+)://(.*)" arg) (open-scheme arg)
    :else (act nil arg)))
