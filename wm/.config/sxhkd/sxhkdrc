# -*- mode: conf -*-

# TODO:
# Say I\'m playing a game, and toggle the music, but keep running forward (W)
#   it\'s easy to fat finger a close window command
# Similarly, w and f are right next to each other, so "fullscreen" and "close window" can get fat fingered
#   both of these are rather unpleasant for games

super + shift + w
    notify-send "todo: new force kill binding"

super + w
    bspc node -c

super + f
    fullscreen_toggle.sh

super + shift + f
    bspc node -t ~fullscreen

super + t
    SLIM=t fullscreen_toggle.sh

# take a tiled window, make it floating, but in the same position of the tile
super + shift + s
    nfloat

super + s
    bspc config pointer_follows_focus true; \
    bspc node -t $(bspc query -N -n -n .tiled >/dev/null && echo floating || echo tiled); \
    bspc node -f; \
    bspc config pointer_follows_focus false

# todo: this could be better re: modes (if in fullscreen monocle, ignore floating windows, for example)
alt + {_,shift} + Tab
    bspc node -f {next,prev}.local.normal.!hidden

super + {_,shift} + Tab
    bspc node -f {next,prev}.local.normal.!hidden

super + {_,shift,alt,ctrl} + {h,n,e,l}
    {focus,move,resize,presel}.sh {west,south,north,east}

super + {_,shift,alt,ctrl} + {Left,Down,Up,Right}
    {focus,move,resize,presel}.sh {west,south,north,east}

super + ctrl + space
    bspc node -p cancel

ctrl + {_,shift} + space
    dunstctl close{ ,-all}

# insert receptacle, or clear receptacles on current desktop
super + {_,shift} + r
    {bspc node -i,for win in $(bspc query -N -d -n .leaf.!window); do bspc node $win -k; done}

# rotate, balance
super + {_,shift} + semicolon
    bspc node $(bspc query -N -n -n .!leaf || echo @/) {-R 90,-B}

# focus the node for the given path jump
# idea: after @parent, check if bspwindows has changed, and if it hasn\'t, keep going
super + {p,b,comma,period}
    bspc node -f @{parent,brother,first,second}

# todo: ask nicely for real.
super + shift + q
    systemctl --user stop panel; \
    zenity --question "Quit wm?" && bspc quit

# toggle panel or gaps.
super + {_,shift} + slash
    {gap,panel}t

super + Return
    elisp '(ns/spawn-terminal)' || $TERMINAL

super + shift + Return
    elisp '(ns/org-capture-popup)'

super + {_,shift,alt} + space
    action='{switcher,run,pass}'; \
    export GTK_THEME=$(theme -q gtk.theme); \
    dmenu_$action -p "$action"

super + grave
    player.sh toggle

# note: ensure using bluetooth if available
# workflow: turn on headphones, bt connect, walk around, toggle
# we never use these buttons from our keyboard anyway
XF86Audio{Prev,Next,Play,Pause}
    check_headphones || player.sh {prev,next,toggle,toggle}

XF86Audio{LowerVolume,RaiseVolume}
    notify-send --urgency=low "Volume: $(ponymix {decrease,increase})"

super + Escape
    notify-send "reloading sxhkd!"; pkill -USR1 -x sxhkd

# mute toggle
XF86AudioMute
    ponymix toggle

# pretend +
super + {minus,equal}
    notify-send --urgency=low "Volume: $(ponymix {decrease,increase} 4)"

super + shift + {minus,equal}
    xbright {down,up}; notify-send --urgency=low "Brightness: $(cat /tmp/xbrightness)"

XF86MonBrightness{Down,Up}
    xbright {down,up}; notify-send --urgency=low "Brightness: $(cat /tmp/xbrightness)"

# you are already using comma and period for window children lol
# < > `
# super + {comma,period,grave}
#     player.sh {prev,next,toggle}

# F9
#     sh -c "$(. $HOME/.profile && shot)"

F8
    utf8

# idea for these: screenshot buttons - or a popup menu
@button8
    pmenu_switcher
    # SWITCH_KIND=do_narrow_piemenu dmenu_switcher switcher
    # pointer_menu
    # notify-send "you pressed mouse8"

button9
    bash -ic ". $HOME/.profile; shot"
    # notify-send "you pressed mouse9"

########
# tags #
########

super + d
    dismiss.sh

super + {i,o,u,y}
    btags focus ^{1,2,3,4}

super + shift + {i,o,u,y}
    btags set-tag-on-wids ^{1,2,3,4} $(bspwindows)

super + control + {i,o,u,y}
    btags show-only ^{1,2,3,4}

# ----
super + {1-4}
    btags focus ^{1-4}

super + shift + {1-4}
    btags set-tag-on-wids ^{1-4} $(bspwindows)

##############
# workspaces #
##############

# super + y
#     bspc node -f older

# super + {1-4}
#     bspc desktop -f focused:^{1-4}

# super + shift + {1-4}
#     bspc node -d focused:^{1-4}

# super + {i,o,u,y}
#     bspc desktop -f focused:^{1,2,3,4}

# super + shift + {i,o,u,y}
#     bspc node -d focused:^{1,2,3,4}
