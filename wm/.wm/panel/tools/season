#!/usr/bin/env bash
# squeeze lemons into a certain shape/style
# the environment comes from i3blocks generated with ripen

new() {
    # border=${border:-#777777}
    if [ -z "$border" ]; then
	border=$(colort -l -30 "$bg")
    fi

    # border_side=$(bs O1 B$border U$border +o +u)
    content=$(bs "B$bg" "F$fg" "U$border" +u <<< "$line")
    # content="$content$(bs "B$bg" "F$fg" "U$border" +u ': ')"
    content="$content$(bs "B$bg" "F$fg" "U$border" +u ':  ')"

    # gradient fade -- depends on dir
    if [ "$align" = "left" ]; then
	# pain
	# if [ "$lemon" = "title" ]; then notify-send 'made it here'; fi
	# if [ "$lemon" = "title" ]; then notify-send "gradient 10 $bg $bg_next"; fi
	for g in $(gradient 10 "$bg" "$bg_next"); do
	    # if [ "$lemon" = "title" ]; then notify-send "arstarst $g"; fi
	    underline=$(colort -l -30 -t "$g")
	    content="$content$(bs "B$g" O2 U$underline +u)"
	done

	if $lemon_end_inner; then
	    # underline=$(colort -l -30 -t "$g")
	    content="$content$(bs "B$underline" O1 U$underline +u)"
	fi
    fi

    if [ "$align" = "right" ]; then
	# notify-send "gradient 4 $bg $bg_next"
	for g in $(gradient 10 "$bg" "$bg_next"); do
	    underline=$(colort -l -30 "$g")
	    content="$(bs "B$g" O2 U$underline +u)${content}"
	done

	if $lemon_end_inner; then
	    # underline=$(colort -l -30 -t "$g")
	    content="$(bs "B$underline" O1 U$underline +u)$content"
	fi
    fi

    if [ "$align" = "center" ]; then
	for g in $(gradient 10 "$bg" "$bg_next"); do
	    underline=$(colort -l -30 "$g")
	    content="$(bs "B$g" O2 U$underline +u)${content}$(bs "B$g" O2 U$underline +u)"
	done

	if $lemon_end_inner; then
	    content="$(bs "B$underline" O1 U$underline +u)$content$(bs "B$underline" O1 U$underline +u)"
	fi
    fi

    printf '%s\n' "$content"
}


spaced_buttons() {

    border=${border:-#777777}
    # border="111111"
    border_side=$(bs O1 B$border U00ffffff +u)
    # border_side=$(bs O1 B$border U$bg +o +u)
    # content=$(echo "  $line  " | bs B$bg F$fg U$border +u +o)
    _padding=6
    content=$(printf "%s%s%s\n" \
		     "$(bs B$bg F$fg U$border +u O$_padding)" \
		     "$(echo "$line" | bs B$bg F$fg U$border +u)" \
		     "$(bs B$bg F$fg U$border +u O$_padding)")

    case $align in
	left)   printf -v content '%s' "$content$border_side" ;;
	center) printf -v content '%s' "$border_side$content$border_side" ;;
	right)  printf -v content '%s' "$border_side$content" ;;
    esac

    printf '%s\n' "$content"
}

give_clickables() {
    # todo: map these to A buttons in amap, check env, then bs
    options="mouse_left mouse_right mouse_middle scroll_up scroll_down overline underline activeoverline activeunderline"
    for o in $options; do
	echo nope
    done
}

# nb. this was just to match awp color for a sense of blending

# border="$(elisp -r '(second (second (read (second (s-lines (slurp "/tmp/result.png.sh"))))))')"
# todo: find out how to lift this, discourage elisp calls in panel
border='#7099c1'

while read -d $'\n' -r line; do
    if [ -z "$line" ]; then
	# blank it out
	echo
	continue
    fi

    # if [ -z "$FORCE" ]; then
    # 	if [ "$lemon" = "tags" ]; then
    # 	    # echo "$line"
    # 	    spaced_buttons
    # 	    continue
    # 	fi
    # fi

    # todo: enhance with buttons from env?

    # echo "$line"
    spaced_buttons
    # new
done
