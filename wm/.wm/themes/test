#!/usr/bin/env bash
# idea: bspwm colors from emacs as well

# test theme
colors() {
    color0=F9F9F9
    color1=D40000
    color2=8FA3AD
    color3=D74214
    color4=7D56C1
    color5=65BA69
    color6=41A4F4
    color7=536D79
    color8=7F7F7F
    color9=D40000
    color10=8FA3AD
    color11=D74214
    color12=7D56C1
    color13=65BA69
    color14=41A4F4
    color15=536D79
    foreground=546E7A
    # background=F7F7F7

    background=FAFAFA

    cursorColor=8B94C6
    # try to derive from theme colors
}

settings() {
    # theme
    # BG_COMMAND="feh --bg-tile /home/neeasade/git/neeasade.net/pattern_125.gif"
    BG_COMMAND="${HOME}/.fehbg"

    emacs_theme="apropospriate-light"
    # emacs_theme="base16-grayscale-light"
    emacs_powerline_scale="1.0"
    PROMPT_CHAR='%'

    # bspwm
    b_border_width=1
    b_normal_border_color=B0A8A6
    b_window_gap=15

    b_bspwmrc_extend="xpad &"

    x_padding=6

    # b_normal_border_color=eeeff0
    # b_active_border_color=cecece
    # b_focused_border_color=7c7c7c

    # p_gap=$(elisp '(frame-fringe-width)')
    p_gap=6

    p_bg_middle=$(elisp -r "(ns/shorten-color (face-attribute 'ns/mode-line-middle :background))")
    p_bg_active=$(elisp -r "(ns/shorten-color (face-attribute 'region :background))")
    p_fg_active=$foreground

    # elisp -r "(face-attribute 'region :background)"

    # p_bg_middle=$(elisp -r "(face-attribute 'ns/mode-line-inactive :background)")

    # p_fg_active="#ff525252"
    # p_format="desktop:circe_dms:title|org_task|mpd:volume:clock"
    p_format="desktop:circe_dms:title|battery|mpd:volume:clock"

    # p_format="battery|desktop|clock"
    # todo: offset should be per font -- it can be in lemonbar
    p_offset="-1"

    p_title_show_mode=active         # used by title.

    p_height=25
    # p_gap=0
    p_line=3
    p_window_class="noshadow"
    p_line=2
    # p_padding=6

    # p_font_main="Charter-10:style=Bold"
    p_font_main="Equity Text B-11"
    # p_font_main="Charter-10:style=Bold"
    p_font_icon="FontAwesome-10" # Panel Icon font.
    p_icon_enable=false
    # p_desktop_display_name=name
    # d_font="Go Mono for Powerline 14"
    d_font="Equity Text A 12"

    # p_desktop_occupied_label=$(uchar f111)
    # p_desktop_empty_label=$(uchar f1db)

    p_desktop_tiling_label=''
    p_desktop_monocle_label=$(uchar f00b)

    # st_font="Go Mono for Powerline-12:style=Regular"
    st_font="Triplicate T4c-12"
    st_font_variable="Equity Text B-12"
    p_title_only_show_active=true
    maxWinNameLen=40

    p_title_theme="fg=\"#ff$(colort -t 30 525252)\""
    p_desktop_theme="fg=\"#ff$(colort -t 30 525252)\""

    c_shadow="false"
    c_frame_opacity="1.0"
    c_shadow_opacity="0.5"
    c_shadow_radius="5"
    c_shadow_offset_x="-8"
    c_shadow_offset_y="-8"

    c_fading="false";
    c_fade_in_step="0.1"
    c_fade_out_step="0.1"
}

activeline() {
    activefg
}

line() {
    bg
}

stepSetup() {
    separateStep
}

# fg() {
#     elisp
# }

activebg() {
    bg
}

# experiment: getting colors from the emacs moedline
bg() {
    elisp -r "(face-attribute 'mode-line :background)"
}

suffix() {
    if [ "$lemon_target_align" = left ]; then
	color=$(elisp -r "(face-attribute 'ns/mode-line-sep :background)")
	if $lemon_target_end; then
	    color=$(elisp -r "(face-attribute 'ns/mode-line-sep-edge :background)")
	fi
	color=$(colort -t "$color")
	# todo: derive width from thin space pixel width in emacs mode line
	echo "%%{B#FF${color}}%%{O3}%%{B-}"
    fi

    if [ "$lemon_target_align" = center ]; then
	color=$(elisp -r "(face-attribute 'ns/mode-line-sep :background)")
	color=$(colort -t "$color")
	echo "%%{B#FF${color}}%%{O3}%%{B-}"
    fi
}

prefix() {
    if [ "$lemon_target_align" = right ]; then
	color=$(elisp -r "(face-attribute 'ns/mode-line-sep :background)")
	if $lemon_target_end; then
	    color=$(elisp -r "(face-attribute 'ns/mode-line-sep-edge :background)")
	fi

	color=$(colort -t "$color")
	echo "%%{B#FF${color}}%%{O3}%%{B-}"
    fi

    if [ "$lemon_target_align" = center ]; then
	color=$(elisp -r "(face-attribute 'ns/mode-line-sep :background)")
	color=$(colort -t "$color")
	echo "%%{B#FF${color}}%%{O3}%%{B-}"
    fi
}
