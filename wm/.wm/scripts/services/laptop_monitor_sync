#!/bin/sh
# my laptop display management script
# modes: mirror auto dota manual
# won't do anything if the desired state is already set, so can be called periodically

# note: don't leave yourself without any display or the display-manager service will kick
# ^ the above becomes important if you say, try to use a projector that doesn't support some
# resolution you try and shove on it

# get these from xrandr
external_monitor=HDMI-1
laptop_monitor=LVDS-1

turn_on() {
    display=$1
    res=$2

    echo setting $display to $res

    xrandr --output $display --primary \
	   --mode $res \
	   --pos 0x0 \
	   --rotate normal

    did_something=true
}

# calling this takes a whole 200ms!
xrandr=$(xrandr)

if echo "$xrandr" | grep -q "${external_monitor} connected"; then
    on_monitor=$external_monitor
    off_monitor=$laptop_monitor
else
    on_monitor=$laptop_monitor
    off_monitor=$external_monitor
fi

# example turned on:
#     HDMI-1 connected primary 1360x768+0+0
#     HDMI-1 connected 1360x768+0+0
# example turned off:
#     HDMI-1 connected
#     HDMI-1 disconnected
on_monitor_status=$(echo "$xrandr" | grep -E "^${on_monitor}" | sed -E 's/\(.*//')
off_monitor_status=$(echo "$xrandr" | grep -E "^${off_monitor}" | sed -E 's/\(.*//')
on_field_count=$(echo "$on_monitor_status" | awk '{print NF}')
off_field_count=$(echo "$off_monitor_status" | awk '{print NF}' )

max_res=$(echo "$xrandr" | grep -A 1 $on_monitor | tail -n 1 | awk '{print $1}')
target_res=${1:-$max_res}

# if there's an external, use it, else use us.
auto() {
    if [ $on_field_count -eq 2 ]; then
	# it's turned off
	turn_on $on_monitor $target_res
    else
	# check that the resolution matches up
	current_resolution=$(echo "$on_monitor_status" | awk '{print $NF}' | grep -Eo '[0-9]+x[0-9]+')
	if [ ! "$target_res" = "$current_resolution" ]; then
	    turn_on $on_monitor $target_res
	fi
    fi

    # does the field end in a resolution
    if echo "$off_monitor_status" | grep -qE '[0-9]+x[0-9]+'; then
	echo "turning $off_monitor off"
	xrandr --output $off_monitor --off
	did_something=true
    fi
}

mirror() {
    max_res=$(echo "$xrandr" | grep -A 1 $laptop_monitor | tail -n 1 | awk '{print $1}')

    turn_on $laptop_monitor $max_res

    # sometimes you can't find the same res on the external display, so this might fail lmao
    # it will be OK, just that laptop view will be trimmed/not show the whole story
    # this means that we cannot see emacs completion so it's a pain in the ass to look at stuff on the fly. need to fix that.

    # hack: check if the resolution is ref'd twice, if so assume that one is for the laptop and one
    # is for the external display
    count=$(echo "$randr" | grep "$max_res" | wc -l)
    if [ $count -ne 2 ]; then
	# the max available on the external display
	max_res=$(echo "$xrandr" | grep -A 1 $external_monitor | tail -n 1 | awk '{print $1}')

	# TODO: the max available on the external that's closest to laptop res (grep -A 1 $max_res)
    fi

    turn_on $external_monitor $max_res

    did_something=true

}

# dota -- low res on auto monitor (assuming that's a display mode)
dota() {
    systemctl --user stop display_sync
    systemctl --user stop compton
    systemctl --user stop unclutter

    turn_on $on_monitor 1280x720 
    # setsid nohup laptop_monitor_sync 1280x720 &
}

manual() {
    turn_on "$1" "$2"
}

did_something=false

if [ -z "$*" ]; then
    auto
else
    systemctl --user stop display_sync
    "$@"
fi

if $did_something; then
    # remove any bspwm defaults that may have been created with the new monitor
    for did in $(bspc query -T -m | jq '.desktops[] | select(.name == "Desktop") | .id'); do
	bspc desktop -r $did
    done

    # reset our monocle measurement
    # "$HOME/.config/bspwm/bspwmrc"

    echo "did something, updating theme stuff"
    # theme refresh dmenu_options
    theme refresh dunst

    # todo: handle potential sxhkd switching
    xbright
fi
