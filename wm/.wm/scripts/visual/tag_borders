#!/usr/bin/env bash
# draw borders on windows deriving from window tags

draw() {
    state=$(btags state-plain)
    state_sans_active=$state

    for wid in $(bspwindows); do
	state_sans_active=${state_sans_active//$wid/}
    done

    # INACTIVE WINDOWS
    while read -r name visible color wids; do
	if ! $visible; then
	   continue
	fi

	# this subshell is expensive
	# c_outer=$(colort -l -30 $color)
	c_outer=$color
	c_border=$color
	c_inner=$c_padding

	border inactive $wids
    done < <(echo "$state_sans_active")

    # MONOCLE TILED
    monocle_mod=
    if jget layout "$(bspc query -T -d)" | grep -q monocle; then
	c_outer=$c_padding
	c_inner=$c_padding
	c_border=$c_padding

	monocle_mod=.floating
	border monocle $(bspc query -N -n .tiled.window)
    fi

    # ACTIVE WINDOWS
    for wid in $(bspwindows active $monocle_mod); do
	while read name active color other; do
	    c_outer=$focused2
	    c_inner=$focused
	    c_border=$color
	    border active $wid
	done < <(echo "$state" | grep -m 1 "$wid")
    done

    wait
}

w_outer=1
w_border=$(theme -q bspwm.border.width)
w_inner=1
w_padding=$(theme -q x.padding)

c_padding=$(theme -q color.normal.background | tr -d \#)

focused=$(theme -q bspwm.border.focused | tr -d \#)
focused2=$(theme -q color.focused.foreground | tr -d \#)

b_width=$((w_inner + w_border + w_outer + w_padding))
border() {
    kind=$1; shift
    chwbn \
	-b $w_outer   -c $c_outer   \
	-b $w_border  -c $c_border  \
	-b $w_inner   -c $c_inner   \
	-b $w_padding -c $c_padding \
	"$@" &
}

# for rounded/plain
b_width=$((w_padding))
border() {
    chwbn -b $w_padding -c $c_padding "$@" &
}


echo bspc config border_width $b_width
bspc config border_width $b_width

draw

bspc subscribe node_flag node_state node_geometry node_focus | while read msg; do
    draw
done
