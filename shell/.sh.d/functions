# -*- mode: sh -*-

task() {
  if cdu Taskfile.yml; then
    og task "$@"
  fi
}

lein() {
  cdu project.clj
  og lein "$@"
}

remind() {
  sleepm "$1"
  shift
  # todo: there should be a sound with this
  notify-send "$*"
  boop
}

lint() {
  # dwim please
  if task | grep -q '* lint:'; then
    task lint
  else
    if cdu .clj-kondo; then
      vdo clj-kondo --config .clj-kondo/config.edn --lint .
    fi
  fi
}

mark() {
  # mark a file to be used in a gui later
  if [ -z "$*" ]; then
    echo "mark <file> <file-name (optional)>"
    return
  fi

  target=$(realpath "$1")
  vdo mkdir -p "$HOME/Last_Shot"
  vdo ln -s "$target" "$HOME/Last_Shot/${2:-$(basename "$target")}"
}

mount_diskfile() {
  if [ -z "$*" ]; then
    echo "mount_diskfile <iso/disk file> <mountpath (optional)>"
    return
  fi

  diskfile=$1
  # mountpath=${2:-./$(basename "$diskfile" | sed 's/\..*//')}
  mountpath=${2:-/media/filemount/$(basename "$diskfile" | sed 's/\..*//')}

  sudo mkdir -p "$mountpath"

  echo sudo mount "$diskfile" "$mountpath" -o loop
  sudo mount "$diskfile" "$mountpath" -o loop
  echo "$mountpath"
}

windowshot() {
  j=$(bspc query -T -n)
  w=$(jget width "$j")
  h=$(jget height "$j")

  x=$(jget x "$j")
  y=$(jget y "$j")

  border=$(bspc config border_width)
  x=$((x - (border/2)))
  y=$((y - (border/2)))

  maim -u -g "${w}x${h}+${x}+${y}" "$(shot_location)"
}

bspwm_kill_visual() {
  for visual in $HOME/.wm/scripts/visual/*; do
    pkill -f $visual 2>/dev/null
  done
}

# todo: finish record functions
recordfull() {
  echo nop
}

record() {
  screenkey -s small -t 0.5
  read -r X Y W H G ID < <(slop -f '%x %y %w %h %g %i')
  byzanz-record -x $X -y $Y -w $W -h $H -d 120 out.gif
  # twilywebm
}

stoprecord() {
  # todo: pkill everything record
  # pkill byzanz-record
  pkill -f twilywebm
  pkill screenkey
}

# from phone
sync_last_phone_file() {
  file=$(ls -t "$HOME/sync/orgzly/org_files" | head -n1)
  echo "$HOME/sync/orgzly/org_files/${file}"
}

blog_add_asset() {
  if [ -z "$*" ]; then
    echo "blog_add_asset <asset filename> <file>"
    echo 'EG blog_add_asset <asset filename> $(shot)'
    return
  fi

  echo cp "$2" "${HOME}/code/neeasade.github.io/site/assets/posts/$1"
  cp "$2" "${HOME}/code/neeasade.github.io/site/assets/posts/$1"
  echo "${HOME}/code/neeasade.github.io/site/assets/posts/$1"
  echo ""
}

blog_add_dtop() {
  if [ -z "$*" ]; then
    echo "blog_add_dtop <url> <date> (date format should be: YYYY-MM-DD)"
    return
  fi

  url=$1
  date=$2

  git_dir="${HOME}/code/neeasade.github.io/"
  if [ ! -d "$git_dir" ]; then
    git clone https://github.com/neeasade/neeasade.github.io "$git_dir"
  fi

  wget -O "${git_dir}/site/assets/img/desktops/full/${date}.png" "$url"

  "${git_dir}/site/assets/img/desktops/make_thumbs.sh"
  echo "don't forget to commit and push!"
  echo "${git_dir}/publish.sh"
}

sysinfo() {
  date
  # clear
  pfetch
  music info
  # pcs() { for i in {0..7}; do echo -en "\e[${1}$((30+$i))m \u2588\u2588 \e[0m"; done; }
  # printf "\n%s\n%s\n\n" "$(pcs)" "$(pcs '1;')"

  # this doesn't work inline like this--
  # elisp '(with-current-buffer (window-buffer) (shx-cmd-view "/path/to/image"))'
}

bicc() {
  du -Sa "${1:-.}" | sort -n -r | head -n "${2:-20}" | awk '{"numfmt --to=si "$1"000" | getline size; $1=""; print size $0}'
}

recentf() {
  # todo: make this smarter - I would also like to do: recentf -s '<2023-09-14 Thu 17:34>'
  # (files since x date)
  ls -t "${1:-.}" | head -n "${2:-1}"
}

sleepm() {
  sleep $(($1 * 60))
}

clean_shot() {
  if [ -f "$HOME/Last_Shot/shot.png" ]; then
    mv "$HOME/Last_Shot/shot.png" "$(cat "$HOME/Last_Shot/.shot.txt")"
    rm "$HOME/Last_Shot/.shot.txt"
  fi
}

shot_location() {
  clean_shot

  # the check is because it might be a symlink
  if [ ! -d $HOME/Screenshots ]; then
    mkdir $HOME/Screenshots
  fi

  mkdir -p $HOME/Last_Shot

  echo "$HOME/Screenshots/$(date +%y-%m-%d-%H:%M:%S).png" > "$HOME/Last_Shot/.shot.txt"
  echo "$HOME/Last_Shot/shot.png"
}

shot() {
  # eval $(slop)
  g=$(slop -p ${1:-0})
  dest=$(shot_location)
  maim -u -g ${g} "$dest"
  xclip -selection clipboard -target image/png -i "$dest"
  echo "$dest"
}

shellshot() {
  # todo: esc $
  # printf '%s\n' "$(elisp '(ns/windowshot)')" | curl -F "file=@-" https://0x0.st
  printf '%s\n' "$(elisp '(ns/windowshot)')" | pb 0x0
}

fullshot() {
  sleep "${1:-0}"
  dest=$(shot_location)
  maim -u "$dest"
  xclip -selection clipboard -target image/png -i "$dest"
  echo "$dest"
}

lastshot() {
  echo "$HOME/Last_Shot/shot.png"
}

viewshot() {
  meh "$(lastshot)"
}

upshot() {
  # todo: trim this, use xeros pb, import it, then paste and alert on your own
  pb 0x0 "$(lastshot)"
}

settitle() {
  $ESHELL && return
  printf "%b" "\033]0;$*\a"
}

defaulttitle() {
  settitle "$(basename "$PWD") - $(basename "$SHELL")"
}

linewrap() {
  ${1:-true} && echo $'\e[?7h' || echo $'\e[?7l'
}

cursorStyle() {
  [ "$TERM" = "linux" ] && return
  $ESHELL && return

  case "$1" in
    bar)       index=6 ;;
    underline) index=4 ;;
    block)     index=2 ;;
  esac

  printf "%b%s" "\e[${index} q"
}

cdu() { # go up until you find something
  start=$PWD
  relative_dir=.
  # look=${*:-project.clj}
  look=${*:-go.mod}
  while ! (test -f "$look" || test -d "$look"); do
    cd ..
    relative_dir="${relative_dir}/.."
    if [ "$PWD" = "/" ]; then
      echo "not found, reached /" >&2
      cd "$start"
      pwd
      return 1
    fi
  done

  pwd
  return 0
}

groot() {
  cdu .git
}

kondo() {
  # the fd usage is to make sure we don't scoop ignored files -- nested repo case
  (
    # fd . | clj-kondo --config .clj-kondo/config.edn --lint -
    if ! vdo cdu .clj-kondo; then
      return
    fi

    # vdo clj-kondo --config .clj-kondo/config.edn --lint "$start"
    vdo clj-kondo --config .clj-kondo/config.edn --lint .

    # echo

    # # doing this way because I don't trust the splitting of:
    # # clj-kondo .. --lint "$(fd -e clj)"

    # while read -r file; do
    #   res=$(clj-kondo --config .clj-kondo/config.edn --lint "$file" 2>&1)
    #   res_line=$(tail -n 1 <<< "$res")
    #   if ! grep -q "errors: 0, warnings: 0" <<< "$res_line"; then
    #     printf '%s\n\n' "$res"
    #   fi
    # done < <(fd -e clj)
    # # done < <(fd -e clj "$start")
  )
}

# nix query
nq() {
  local CACHE="$HOME/.cache/nq-cache"

  if ! ( [ -e $CACHE ] && [ $(stat -c %Y $CACHE) -gt $(( $(date +%s) - 3600 )) ] ); then
    echo "update cache"
    nix-env -qa --json > "$CACHE"
  fi

  jq -r 'to_entries | .[] | .key + "|" + .value.meta.description' < "$CACHE" |
    {
      if [ $# -gt 0 ]; then
        # double grep because coloring breaks column's char count
        # $* so that we include spaces (could do .* instead?)
        grep -i "$*" | column -t -s "|" | grep -i "$*"
      else
        column -t -s "|"
      fi
    }
}

dec2hex() {
  printf "%X\n" $1
}

hex2dec() {
  printf "%d\n" 0x$1
}

extract() {      # Handy Extract Program
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2)   tar xvjf "$1"     ;;
      *.tar.gz)    tar xvzf "$1"     ;;
      *.bz2)       bunzip2 "$1"      ;;
      *.rar)       unrar x "$1"      ;;
      *.gz)        gunzip "$1"       ;;
      *.tar)       tar xvf "$1"      ;;
      *.tbz2)      tar xvjf "$1"     ;;
      *.tgz)       tar xvzf "$1"     ;;
      *.zip)       unzip "$1"        ;;
      *.Z)         uncompress "$1"   ;;
      *.7z)        7z x "$1"         ;;
      *.xz)        unxz "$1"         ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

dotadd() {
  echo stowo $(iif $MAC os/mac bin)
  file=$(find ~/bin | fzf) || return
  file=$(basename "$file")

  binpath="$HOME/.dotfiles/bin/bin/"
  if $MAC; then
    binpath="$HOME/.dotfiles/os/mac/bin/"
  fi

  vdo mv "$HOME/bin/$file" "$binpath/$file"
  (cd "$binpath"; git add "$file")

  echo stowo $(iif $MAC os/mac bin)
  stowo $(iif $MAC os/mac bin)
}

passadd() {
  (echo "$2"; echo "$2") | pass add "$1"
}

gset() {
  g_conf() {
    echo git config user.name "$1"
    git config user.name "$1"
    echo git config user.email "$2"
    git config user.email "$2"
  }

  if [ ! -z "$2" ]; then
    g_conf "$1" "$2"
    return
  fi

  # todo: add a 'none'/'anon' option
  case $1 in
    pass) g_conf "$(pass git/name)" "$(pass git/email)" ;;
    github) g_conf "neeasade" "neeasade@users.noreply.github.com" ;;
    manual)
      echo name:; read name
      echo email:; read email
      g_conf "$name" "$email"
      ;;
    adhoc)
      name=$(getent passwd "$USER" | cut -d ':' -f 5 | sed 's/,//g')
      g_conf "${name:-$USER}" "${USER}@$(hostname).machine"
      ;;
    *)
      echo "gset <name> <email>"
      echo "or: gset manual|adhoc|pass|github"
      ;;
  esac
}

jtemp() {
  # jump to some temp dir
  working_dir="$HOME/temps"

  selected=$(
    for context in ${working_dir}/*/context.txt; do
      desc=$(cat $context)
      # do not add a space after the pipe!
      echo "$desc |$context"
    done | fzf)

  cd "$(dirname "$(echo "$selected" | awk -F\| '{print $2}')")"
}

ttemp() {
  working_dir="$HOME/temps"
  current=$(date +%F_%T)

  mkdir -p "${working_dir}/${current}"
  cd "${working_dir}/${current}"
  pwd

  echo "${*:-None}" > ./context.txt
}

# dump the structure of some json to find paths
jqpeek() {
  # paths:
  # jq '[path(..)|map(if type=="number" then "[]" else tostring end)|join(".")|split(".[]")|join("[]")]|unique|map("."+.)|.[]'

  # paths with values:
  # note: numbers in path are array indices
  # may get in the way of searching for like a number
  jq -r '
paths(scalars) as $p
  | [ ( [ $p[] | tostring ] | join(".") )
    , ( getpath($p) | tojson )
    ]
  | join(" = ")
'
}

qq() {
  if $MAC; then
    f_normal=$HOME/.dotfiles/os/mac/.config/karabiner/karabiner_normal.json
    f_colemak=$HOME/.dotfiles/os/mac/.config/karabiner/karabiner_colemakdhk.json
    f_status=$HOME/.config/karabiner/karabiner.json

    if [ ! -f "$f_status" ]; then
      cp "$f_normal" "$f_status"
    fi

    current=unknown
    if silent diff "$f_status" "$f_normal"; then
      current=$f_normal
    elif silent diff "$f_status" "$f_colemak"; then
      current=$f_colemak
    fi

    case "$current" in
      $f_normal)
        # WE ARE ON THE LAPTOP
        rm "$f_status"
        vdo cp "$f_colemak" "$f_status"
        skhdrc-gen laptop > $HOME/.skhdrc
        # EXTERNAL QWERTY KEYBOARD? UNCOMMENT ME
        # skhdrc-gen > $HOME/.skhdrc

        skhd --reload
        elisp "(setq mac-control-modifier 'super mac-command-modifier 'control)"
        ;;
      $f_colemak)
        rm "$f_status"
        vdo cp "$f_normal" "$f_status"
        skhdrc-gen > $HOME/.skhdrc
        skhd --reload
        elisp "(setq mac-control-modifier 'control mac-command-modifier 'super)"
        ;;
      *)
        echo "existing karabiner.json in unknown state!" >&2
        echo "$f_status" >&2
        ;;
    esac
  else
    colemak
  fi
}

if $MAC && ! has update_terminal_cwd; then
  # macos
  update_terminal_cwd() {
    if [ $TERM = dumb ]; then
      return
    fi

    # Identify the directory using a "file:" scheme URL,
    # including the host name to disambiguate local vs.
    # remote connections. Percent-escape spaces.
    local SEARCH=' '
    local REPLACE='%20'
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
    printf '\e]7;%s\a' "$PWD_URL"
  }
fi

elispf() {
  f=$1
  shift
  args=
  for a in "$@"; do
    case "$a" in
      ''|*[!0-9]*)
        args="${args} \\\"${a}\\\""
        ;;
      *)
        args="${args} ${a}"
        ;;
    esac
  done
  vdo elisp "($f ${args})"
}

barstuff() {
  barlaunch() {
    if ! pgrep "$*"; then
      vdo nohup "$*" &
    fi
  }

  barlaunch MeetingBar
  barlaunch xbar
  barlaunch skhd
  barlaunch stayon
}

aawp() {
  (
  cd ~/walls
  case "$1" in
    "") echo "options: wall|list|<rule>" ;;
    wall) vdo ./$(ls *.awp | shuf | head -n 1) ;;
    list) # list rules
      awk 1 *.awp | grep -v env | awk '{print $2}' | sort | uniq -c | sort -nr | column
      ;;
    *) # assume it's a number
      vdo ./$(grep -l " $1 " * | shuf | head -n 1) ;;
    esac
  )
}
