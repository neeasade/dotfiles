# -*- mode: sh -*-
set -a

pathmunge () {
  # todo: consider checking if the path exists or not
  if ! echo $PATH | egrep -q "(^|:)$1($|:)" ; then
    PATH=$1:$PATH
  fi
}

succ() {
  pathmunge "$HOME/$@"
}

XDG_CONFIG_HOME=$HOME/.config

succ bin
succ .gem/bin
succ .go/bin
succ .cargo/bin
succ .wm/scripts/interact
succ .wm/scripts/visual
succ .wm/scripts/services
succ .wm/panel/lemons
succ .wm/panel/tools
# pip --user location
succ .local/bin

succ git/Pye-Menu/result/bin

# gross
pathmunge "/run/current-system/Applications/Emacs.app/Contents/MacOS/"
pathmunge "/Applications/iterm.app/contents/macos"
pathmunge "/Applications/BitBar.app/Contents/MacOS/"

# somehow the space in the path here screws everything in other places
# pathmunge "/Applications/Google Chrome.app/Contents/MacOS/"


silent() {
  "$@" >/dev/null 2>&1
}

has() {
  silent type "$@"
}

vdo() {
    echo "$*"
    "$@"
}

# duplication with ~/bin/iif is intentional
# function call vs script means can use shell functions in condition
iif() {
  res=${2-true}
  if ! eval "$1" >/dev/null; then
    res=${3-false}
  fi

  printf '%s' "$res"
}

set_editor() {
  export EDITOR="$@"
  export GIT_EDITOR="$@"
  export SVN_EDITOR="$@"
}
set_editor vim

WINDOWS=$(iif "[ ! -n $(uname | awk '$1 ~ /MINGW|MSYS/ {print $1}') ]")
MAC=$(iif "[ ! -z $(uname | awk '$1 ~ /Darwin/ {print $1}') ]")

# less status line
LESS='-R -f -X -i -P ?f%f:(stdin). ?lb%lb?L/%L.. [?eEOF:?pb%pb\%..]'
LESSCHARSET='utf-8'

FILEBROWSER=thunar
VIEW_PDF=zathura

if [ -z "$TERMINAL" ]; then
  for t in git-bash xst urxvt iterm2; do
    if has $t; then
      TERMINAL=$t
      break
    fi
  done
fi

# default
GTK_THEME=${GTK_THEME:-adwaita}
SXHKD_SHELL=sh
MPDCRON_DIR="$HOME/.config/mpd"
_JAVA_AWT_WM_NONREPARENTING=1
LANG="en_US.UTF-8"
TERMCMD=$TERMINAL
PAGER=less

# if has npm; then
#   if has cache_output; then
#     day="$(expr 60 \* 60 \* 24)"
#     NODE_PATH="$(cache_output $day npm root -g)"
#     PATH="$PATH:$(cache_output $day npm bin -g)"
#   else
#     NODE_PATH="$(npm root -g)"
#     PATH="$PATH:$(npm bin -g)"
#   fi
# fi

NODE_PATH="$HOME/.npm-packages/lib/node_modules"
pathmunge "$HOME/.npm-packages/bin"

GEM_HOME="$HOME/.gem"
BUNDLE_PATH="$HOME/.gem"
GOPATH="$HOME/.go"

if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then
  . $HOME/.nix-profile/etc/profile.d/nix.sh; 
fi 

REMOTE=false

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  REMOTE=true
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) REMOTE=true;;
  esac
fi

if $MAC && has 'google chrome'; then
   BROWSER='google chrome'
fi

if has qutebrowser; then
  BROWSER=qb_meta_open
fi

set +a

cur_shell=$(ps | grep $$ | sed 's/^.* //')
cur_shell=${cur_shell##*/}

if has direnv; then
  eval "$(direnv hook $cur_shell)"
fi

if ! has update_terminal_cwd; then
  # macos
  update_terminal_cwd() {
    if [ $TERM = dumb ]; then
      return
    fi

    # Identify the directory using a "file:" scheme URL,
    # including the host name to disambiguate local vs.
    # remote connections. Percent-escape spaces.
    local SEARCH=' '
    local REPLACE='%20'
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
    printf '\e]7;%s\a' "$PWD_URL"
  }
fi

