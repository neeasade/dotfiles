# -*- mode: sh -*-

NEEASADE_ENV=true

if ${NEEASADE_ENV:-true}; then
  set -a

  NEEASADE_ENV=false

  path_remove() {
    export PATH=${PATH//":$1:"/":"} # middle
    export PATH=${PATH/#"$1:"/}     # beginning
    export PATH=${PATH/%":$1"/}     # end
  }

  pathmunge () {
    _dir=${1%/}
    path_remove "$_dir"
    if [ -d "$_dir" ]; then
      case ":${PATH}:" in
        *:"$_dir":*) ;;
        *) export PATH=$_dir:$PATH
      esac
    fi
  }

  XDG_CONFIG_HOME="$HOME/.config"

  silent() { "$@" >/dev/null 2>&1; }
  has()    { silent type "$@"; }
  vdo()    { echo "$*"; "$@"; }

  set_system () {
    MAC=false
    WINDOWS=false
    LINUX=false

    export $*=true
  }

  case "$(uname)" in
    *MINGW*) set_system WINDOWS ;;
    *MSYS*) set_system WINDOWS ;;
    *Darwin*) set_system MAC ;;
    *) set_system LINUX;;
  esac

  set_editor() {
    export EDITOR="$@"
    export GIT_EDITOR="$@"
    export SVN_EDITOR="$@"
  }

  set_editor vim

  msource() { # maybe source (if file exists)
    if [ -e "$*" ]; then
      . "$*"
    fi
  }

  pathmunge '/run/current-system/sw/bin'
  pathmunge '/run/wrappers/bin/'
  pathmunge "$HOME/.dotfiles/theming"

  # less status line
  LESS='-R -f -X -i -P ?f%f:(stdin). ?lb%lb?L/%L.. [?eEOF:?pb%pb\%..]'
  LESSCHARSET='utf-8'

  VIEW_PDF=zathura

  if [ -z "$TERMINAL" ]; then
    for t in kitty xst urxvt iterm2 konsole git-bash; do
      if has $t; then
        TERMINAL=$t
        break
      fi
    done
  fi

  GTK_THEME=${GTK_THEME:-adwaita}
  SXHKD_SHELL=sh
  MPDCRON_DIR="$HOME/.config/mpd"
  _JAVA_AWT_WM_NONREPARENTING=1
  LANG="en_US.UTF-8"
  TERMCMD=$TERMINAL
  PAGER=less

  NPM_GLOBAL="$HOME/.npm-packages" # nb: arbitrary name and location
  NODE_PATH="${NPM_GLOBAL}/lib/node_modules"

  GEM_HOME="$HOME/.gem"
  BUNDLE_PATH="$HOME/.gem"
  GOPATH="$HOME/.go"
  CODEHOME="$HOME/git"

  HOMEBREW_PREFIX='/opt/homebrew/'

  NVM_DIR="$HOME/.nvm"
  msource "$HOMEBREW_PREFIX/opt/nvm/nvm.sh"
  msource "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm"

  pathmunge "${HOMEBREW_PREFIX}/opt/findutils/libexec/gnubin"

  pathmunge '/run/current-system/sw/bin'
  pathmunge '/run/wrappers/bin/'
  pathmunge "$HOME/.dotfiles/theming"

  # the p is for pain
  for p in                                \
      $HOME/.wm/{scripts,panel}/*/        \
      $HOME/{,.cargo,.local}/bin          \
      {$GEM_HOME,$GOPATH,$NPM_GLOBAL,$HOMEBREW_PREFIX}/bin \
    ; do
    pathmunge "$p"
  done


  # msource "$HOME/.nix-profile/etc/profile.d/nix.sh"
  if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
    if [ -z "$NIX_PROFILES" ]; then
      . "$HOME/.nix-profile/etc/profile.d/nix.sh"
    fi
  fi

  if $MAC; then
    add_macapp() {
      pathmunge "/run/current-system/Applications/${*}.app/Contents/MacOS/"
      pathmunge "/Applications/${*}.app/contents/MacOS"
      pathmunge "/System/Applications/${*}.app/Contents/MacOS/"
    }

    for a in Preview Slack Emacs iTerm BitBar xbar MeetingBar; do
      add_macapp "$a"
    done
  fi

  REMOTE=false

  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    REMOTE=true
  else
    case $(ps -o comm= -p $PPID) in
      sshd|*/sshd) REMOTE=true;;
    esac
  fi

  if $MAC && has 'google chrome'; then
    BROWSER='google chrome'
  fi

  if has qutebrowser; then
    BROWSER=qutebrowser
    if has yq && has socat; then
      BROWSER=qb_meta_open
    fi
  fi

  # why did I do this
  # replace eval
  reval() {
    template=$1
    shift

    i=0
    while [[ ! -z "$*" ]]; do
      current=$1
      shift
      i=$((i+1))
      template=${template//%$i/${current}}
    done
    eval "$template"
  }

  for service in picom stalonetray; do
  reval \
    '%1() {
    if silent pgrep %1; then
      vdo systemctl --user stop %1
    else
      vdo systemctl --user start %1
    fi
  }' $service
  done

  set +a
fi
