# -*- mode: sh -*-

# cur_shell=$(ps | grep $$ |  sed 's/^.* //')
cur_shell=$(ps | grep $$ | head -n 1 | awk  '{print $NF}')
cur_shell=${cur_shell##*/}

if has direnv; then
  eval "$(direnv hook $cur_shell)"
fi

[ -n "$EAT_SHELL_INTEGRATION_DIR" ] && \
  source "$EAT_SHELL_INTEGRATION_DIR/bash"

# ESHELL meaning shell-mode in emacs
ESHELL=false

if [ -n "$INSIDE_EMACS" ] && [ "$TERM" = "dumb" ]; then
  ESHELL=true
fi

if ! $ESHELL; then
  if $REMOTE && [ "$TERM" = "dumb" ]; then
    ESHELL=true
  fi
fi

if $ESHELL && has elisp && ! $REMOTE && silent elisp t; then
  pathmunge "$HOME/.emacs.d/scripts"
  eclient="emacsclient"

  if $WINDOWS; then
    eclient="${eclient}w --server-file $HOME/.emacs.d/server/${EMACS_SERVER_FILE:-emacs-server-file}"
  fi

  set_editor "$eclient"

  export PAGER=epager
  less() {
    epager
  }

  man() {
    elisp "(man \"$*\") (ns/find-or-open \"*Man ${*}*\") (Man-cleanup-manpage)"
  }

  clear() {
    silent elisp "(run-at-time 0 nil 'comint-clear-buffer)"
  }

  term() {
    if [ -z "$*" ]; then
      $TERMINAL
    else
      # $TERMINAL -e "$@"
      # todo: cosider saving all stderr stdout somewhere
      # todo: mac handling
      echo "$TERMINAL -e sh -c '$@; echo; echo command finished.; read pause' "
      eval "$TERMINAL -e sh -c '$@; echo; echo command finished.; read pause' "
    fi
  }

  # npm interfaces like to use cursor movement sometimes
  for yeet in vim htop nethack cava npm iotop; do
    if has $yeet; then
      reval '%1() { term %1 "$@"; }' "$yeet"
    fi
  done

  # alias sudo='sudo PS1=$PS1 PAGER=$PAGER'
  # todo: sudo alias that can pass along PAGER var
  # maybe something else if we think of it too

  sxhkd() {
    pgrep sxhkd >/dev/null && pkill sxhkd
    path_remove "$HOME/.emacs.d/scripts"
    og sxhkd
  }
fi
