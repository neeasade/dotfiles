# -*- mode: sh -*-

type theme >/dev/null 2>&1 &&
    _promptchar=$(theme -q st.prompt_char 2>/dev/null) ||
    _promptchar='%'

_promptchar=ðŸ”µ
_promptchar_err=ðŸ”´

# dotfiles have been setup, but we're in a special location/no theme has been loaded:
if [ -z "$_promptchar" ]; then
  _promptchar='$'
fi

if [ -z "$cur_shell" ]; then
  cur_shell=$(ps | grep $$ |  sed 's/^.* //')
  cur_shell=${cur_shell##*/}
fi

[ "$cur_shell" = "zsh" ] && [ $_promptchar = "%" ] && _promptchar="%%"

# todo here: timeout if we take too long (remote FS)
git_prompt() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    return
  fi

  if ! git rev-parse --is-inside-git-dir &>/dev/null; then
    return
  fi

  # I don't understand this check
  test -O "$(git rev-parse --show-toplevel)/.git/index" && \
    git update-index --really-refresh -q &>/dev/null

  g_status=
  g_append() {
    g_status="${g_status}${1}"
  }

  git diff --quiet --ignore-submodules --cached || g_append '+' # Check for uncommitted changes in the index.
  git diff-files --quiet --ignore-submodules    || g_append '*' # Check for unstaged changes.
  test -n "$(git ls-files --others --exclude-standard)" && g_append '?' # Check for untracked files.

  g_branch=$(git symbolic-ref --quiet --short HEAD 2>/dev/null || \
      git rev-parse --short HEAD 2>/dev/null || \
      echo 'unknown')

  if [ "$g_branch" = "master" ] || [ "$g_branch" = "main" ]; then
    if [ ! -z "${g_status}" ]; then
      echo "${g_status} "
    fi
  else
    if [ ! -z "${g_status}" ]; then
      g_status="|$g_status"
    fi
    echo "(${g_branch}${g_status}) "
  fi
}

env_prompt() {
  if [ "$cur_shell" != "bash" ]; then
    return
  fi

  if ! type cache_output >/dev/null; then
    return
  fi

  # these are PREFIXES
  BASH_EPHEMERAL='_|BASH|COLUMNS|LINES|PWD|HISTCMD|OLDPWD|GPG_TTY|FUNCNAME|PPID|SHLVL'

  # the 'echo $TERM' allows fluid switching between terms/eshell
  BASH_CHANGED_VARS=$(diff \
                        <(cd; cache_output bash -ic "(set -o posix; echo $TERM; set | grep -vE '^(${BASH_EPHEMERAL})')") \
                        <((set -o posix; set) | grep -vE "^(${BASH_EPHEMERAL})") \
                        | grep '^> ' | sed 's/> //' )

  BASH_CHANGED_VARS=$(grep -oE '^[a-zA-Z_]+\=' <<< "$BASH_CHANGED_VARS")
  BASH_CHANGED_CAPS=$(grep -oE '^[A-Z_]+\=' <<< "$BASH_CHANGED_VARS")

  if [ ! -z "$BASH_CHANGED_CAPS" ]; then
    echo "E "
  fi
}

envv() {
  # prompt function runs in subshell so we have to get it again
  env_prompt >/dev/null
  local v
  for v in $BASH_CHANGED_CAPS; do
    eval printf "'%s=%s\n'" "'${v%?}'" "\"\${${v%?}}\""
  done
}

envv_all() {
  # prompt function runs in subshell so we have to get it again
  env_prompt >/dev/null
  local v
  for v in $BASH_CHANGED_VARS; do
    eval printf "'%s=%s\n'" "'${v%?}'" "\"\${${v%?}}\""
  done
}

# tell emacs about my shell location, including any tramp info
tell_emacs_shell_location() {
  _shell_location=$PWD

  if ${REMOTE:-false}; then
    if [ ! -z "$TRAMP_INFO" ]; then
      _shell_location="$TRAMP_INFO$PWD"
    else
      ssh_ip=$(echo $SSH_CONNECTION | awk '{print $3}' | sed 's/::1/localhost/')

      ssh_port=$(echo $SSH_CONNECTION | awk '{print $4}')
      if [ "$ssh_port" = "22" ]; then
        unset ssh_port
      else
        ssh_port="#${ssh_port}"
      fi
    _shell_location="/ssh:${USER}@${ssh_ip}${ssh_port}:$PWD"
    fi
  fi

  echo "+Pr0mPT+${_shell_location}+"
}

prompt() {
    _ERR=$?
    [ "$(id -u)" = "0" ] && _promptchar=\#

    _prompt=$_promptchar

    [ $(jobs | wc -l) -ne 0 ] && _prompt="${_prompt}${_prompt}"

    if [ $_ERR -ne 0 ]; then
       _prompt="${_prompt%?}${_promptchar_err}"
       if [ $_ERR -ne 1 ]; then
         _prompt="${_prompt}$_ERR"
       fi
    fi

    _prompt="$(git_prompt)$(env_prompt)$_prompt"
    # _prompt="$(git_prompt)$_prompt"
    # _prompt="$_prompt"

    if ${REMOTE:-false}; then
      _prompt="$(hostname) $_prompt"
    fi

    line_number=2
    if ${ESHELL:-false}; then
      _prompt="$(tell_emacs_shell_location)$_prompt"
      line_number=$(elisp '(with-current-buffer (window-buffer (selected-window)) (line-number-at-pos))')
    fi

    if [ "$line_number" -gt 1 ]; then
      printf "\n%b%s" "$_prompt "
    else
      printf "%b%s" "$_prompt "
    fi
}

PS1='$(prompt)'

$ESHELL || cursorStyle bar
