# -*- mode: sh -*-

type theme >/dev/null 2>&1 &&
    _promptchar=$(timeout 1 theme getval PROMPT_CHAR 2>/dev/null) ||
    _promptchar='%'

# dotfiles have been setup, but we're in a special location/no theme has been loaded:
if [ -z "$_promptchar" ]; then
  _promptchar='$'
fi

if [ -z "$cur_shell" ]; then
  cur_shell=$(ps | grep $$ |  sed 's/^.* //')
  cur_shell=${cur_shell##*/}
fi

[ "$cur_shell" = "zsh" ] && [ $_promptchar = "%" ] && _promptchar="%%"

# todo here: timeout if we take too long (remote FS)
git_prompt() {
  if ! git rev-parse --is-inside-work-tree &>/dev/null; then
    return
  fi

  if ! git rev-parse --is-inside-git-dir &>/dev/null; then
    return
  fi

  # I don't understand this check
  test -O "$(git rev-parse --show-toplevel)/.git/index" && \
    git update-index --really-refresh -q &>/dev/null

  g_status=
  g_append() {
    g_status="${g_status}${1}"
  }

  git diff --quiet --ignore-submodules --cached || g_append '+' # Check for uncommitted changes in the index.
  git diff-files --quiet --ignore-submodules    || g_append '*' # Check for unstaged changes.
  test -n "$(git ls-files --others --exclude-standard)" && g_append '?' # Check for untracked files.

  g_branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo 'unknown')"

  if [ "$g_branch" = "master" ]; then
    if [ ! -z "${g_status}" ]; then
      echo "${g_status} "
    fi
  else
    if [ ! -z "${g_status}" ]; then
      g_status="|$g_status"
    fi
    echo "(${g_branch}${g_status}) "
  fi
}

env_prompt() {
  if [ "$cur_shell" != "bash" ]; then
    return
  fi

  if ! type cache_output >/dev/null; then
    return
  fi

  changed_vars=$(diff \
                   <(cd; cache_output bash -ic '(set -o posix; set | grep -vE "^(BASH_|COLUMNS|LINES|PWD|OLDPWD)")') \
                   <((set -o posix; set) | grep -vE '^(BASH|changed_vars|FUNCNAME|PPID|SHLVL|COLUMNS|LINES|PWD|OLDPWD)') \
                   | grep '^> ' | sed 's/> //' | grep -oE '^[A-Z]+\=')

  if [ ! -z "$changed_vars" ]; then
    echo "E "
  fi
}

envv() {
  # prompt function runs in subshell so we have to get it again
  env_prompt >/dev/null

  for v in $changed_vars; do
    printf '%s%q\n' $v "$(eval "echo \"\${${v}}\"")"
  done
}

# tell emacs about my shell location, including any tramp info
tell_emacs_shell_location() {
  _shell_location=$PWD

  if $REMOTE; then
    if [ ! -z "$TRAMP_INFO" ]; then
      _shell_location="$TRAMP_INFO$PWD"
    else
      ssh_ip=$(echo $SSH_CONNECTION | awk '{print $3}' | sed 's/::1/localhost/')

      ssh_port=$(echo $SSH_CONNECTION | awk '{print $4}')
      if [ "$ssh_port" = "22" ]; then
        unset ssh_port
      else
        ssh_port="#${ssh_port}"
      fi
    _shell_location="/ssh:${USER}@${ssh_ip}${ssh_port}:$PWD"
    fi
  fi

  echo "+Pr0mPT+${_shell_location}+"
}

prompt() {
    _ERR=$?
    [ "$(id -u)" = "0" ] && _promptchar=\#

    _prompt=$_promptchar

    [ $(jobs | wc -l) -ne 0 ] && _prompt="${_prompt}${_prompt}"
    [ $_ERR -ne 0 ] && _prompt=${_prompt%?}!

    _prompt="$(git_prompt)$(env_prompt)$_prompt"
    # _prompt="$(git_prompt)$_prompt"
    # _prompt="$_prompt"

    if ${REMOTE:-false}; then
      _prompt="$(hostname) $_prompt"
    fi

    if ${ESHELL:-false}; then
      _prompt="$(tell_emacs_shell_location)$_prompt"
    fi

    if ${_prompt_newline:-false}; then
      printf "\n%b%s" "$_prompt "
    else
      printf "%b%s" "$_prompt "
    fi
}

# this might be a bad way to go about this
# at the least, it feels annoyingly verbose
_prompt_first=${_prompt_first:-true}
prompt_set_newline() {
  if $_prompt_first; then
    _prompt_first=false
  else
    _prompt_newline=true
  fi
}

if ! echo "$PROMPT_COMMAND"  | grep -q prompt_set_newline; then
  export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
fi

# PROMPT_COMMAND=prompt_set_newline

PS1='$(prompt)'

$ESHELL || cursorStyle bar
