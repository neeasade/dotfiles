# -*- mode: conf -*-

# todo: consider having a toggle for the tray

super + {_,shift} + w
    bspc node -{c,k}

# take a tiled window, make it floating, but in the same position of the tile
super + shift + s
    nfloat

super + s
    bspc config pointer_follows_focus true; \
    bspc node -t $(bspc query -N -n -n .tiled >/dev/null && echo floating || echo tiled); \
    bspc node -f; \
    bspc config pointer_follows_focus false

super + f
    fullscreen_toggle.sh

super + t
    SLIM=t fullscreen_toggle.sh

super + shift + f
    bspc node -t ~fullscreen

super + y
    dismiss.sh

super + shift + y
    btags set-tag-on-wids hole $(bspwindows)

alt + {_,shift} + Tab
    bspc node -f {next,prev}.local.normal.!hidden

super + {_,shift} + Tab
    bspc node -f {next,prev}.local.normal.!hidden

super + {_,shift,alt,ctrl} + {h,n,e,l}
    {focus,move,resize,presel}.sh {west,south,north,east}

super + {_,shift,alt,ctrl} + {Left,Down,Up,Right}
    {focus,move,resize,presel}.sh {west,south,north,east}

super + ctrl + space
    bspc node -p cancel

super + {1-9}
    btags focus ^{1-9}

super + shift + {1-9}
    btags set-tag-on-wids ^{1-9} $(bspwindows)

super + {i,o,u}
    btags focus ^{1,2,3}

super + shift + {i,o,u}
    btags set-tag-on-wids ^{1,2,3} $(bspwindows)

# insert receptacle, or clear receptacles on current desktop
super + {_,shift} + r
    {bspc node -i,for win in $(bspc query -N -d -n .leaf.!window); do bspc node $win -k; done}

# rotate, balance
super + {_,shift} + semicolon
    bspc node $(bspc query -N -n -n .!leaf || echo @/) {-R 90,-B}

# focus the node for the given path jump
# idea: after @parent, check if bspwindows has changed, and if it hasn't, keep going
super + {p,b,comma,period}
    bspc node -f @{parent,brother,first,second}

# kill panel, nicely ask all windows to close, quit.
# todo: ask nicely for real.
super + shift + q
    pgrep lemonbar && panelt; \
    zenity --question "Quit wm?" && bspc quit

# toggle panel or gaps.
super + {_,shift} + slash
    {gap,panel}t

super + Return
    elisp '(ns/spawn-terminal)' || $TERMINAL

super + shift + Return
    elisp '(ns/org-capture-popup)'

super + {_,shift,alt} + space
    action='{switcher,run,pass} '; \
    export GTK_THEME=$(timeout 1 theme getval GTK_THEME || echo Raleigh); \
    dmenu_$action "$action"

super + grave
    player.sh toggle

XF86Audio{Prev,Next,Play,Pause}
    player.sh {prev,next,toggle,toggle}

XF86Audio{LowerVolume,RaiseVolume}
    notify-send --urgency=low "Volume: $(ponymix {decrease,increase})"

super + Escape
    notify-send "reloading sxhkd!"; pkill -USR1 -x sxhkd

# from here down are keys that I'm treating like macro keys

# mute toggle
XF86AudioMute
    ponymix toggle

# pretend +
super + {minus,equal}
    notify-send --urgency=low "Volume: $(ponymix {decrease,increase} 5)"

super + shift + {minus,equal}
    xbright {down,up}; notify-send --urgency=low "Brightness: $(cat /tmp/xbrightness)"

XF86MonBrightness{Down,Up}
    xbright {down,up}; notify-send --urgency=low "Brightness: $(cat /tmp/xbrightness)"

# you are already using comma and period for window children lol
# < > `
# super + {comma,period,grave}
#     player.sh {prev,next,toggle}

# F9
#     sh -c "$(. $HOME/.profile && shot)"

F8
    utf8

# idea for these: screenshot buttons - or a popup menu
@button8
    SWITCH_KIND=do_narrow_piemenu dmenu_switcher switcher
    # notify-send "you pressed mouse8"

button9
    bash -ic ". $HOME/.profile; shot"
    # notify-send "you pressed mouse9"
