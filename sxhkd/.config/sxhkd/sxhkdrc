# -*- mode: conf -*-
# bspwm hotkeys {{{
super + {_,shift} + w
    bspc node -{c,k}

# take a tiled window, make it floating, but in the same position of the tile
super + S
    nfloat

super + s
    bspc config pointer_follows_focus true; \
    bspc node -t $(bspc query -N -n -n .tiled >/dev/null && echo floating || echo tiled); \
    bspc node -f; \
    bspc config pointer_follows_focus false

super + f
    bspc node -t ~fullscreen

# if the current node is automatic, send it to the last manual, otherwise pull the last leaf
super + y
    bspc query -N -n focused.automatic && bspc node -n last.!automatic || bspc node last.leaf -n focused

alt + {_,shift} + Tab
    bspc node -f {next,prev}.local.normal

super + {_,shift} + Tab
    bspc node -f {next,prev}.local.normal

super + t
    bspc desktop -l next

super + {_,shift,alt,ctrl} + {h,n,e,l}
    {focus,move,resize,presel}.sh {west,south,north,east}

super + {_,shift,alt,ctrl} + {Left,Down,Up,Right}
    {focus,move,resize,presel}.sh {west,south,north,east}

super + ctrl + space
    bspc node -p cancel

super + {1-9}
    bspc desktop -f focused:^{1-9}
    # btags focus ^{1-9}

super + shift + {1-9}
    bspc node -d focused:^{1-9}
    # btags toggle-wids ^{1-9} $(bspc query -N -n)

# insert receptacle, or clear receptacles on current desktop
super + {_,shift} + r
    {bspc node -i,for win in $(bspc query -N -d -n .leaf.!window); do bspc node $win -k; done}

# rotate, balance
super + {_,shift} + semicolon
    bspc node $(bspc query -N -n -n .!leaf || echo @/) {-R 90,-B}

# hide current node, or restore a queried hidden node
# todo: revisit this
# super + {_,shift} + minus
    # bspc node {,$(bspc query -N -d -n .hidden | head -n 1)} -g hidden

# focus the node for the given path jump
super + {p,b,comma,period}
    bspc node -f @{parent,brother,first,second}

# kill panel, nicely ask all windows to close, quit.
# todo: ask nicely for real.
super + shift + q
    pgrep lemonbar && panelt; \
    zenity --question "Quit wm?" && bspc quit

# toggle panel or gaps.
super + {_,shift} + slash
    {gap,panel}t

# }}}

# wm independent hotkeys {{{

#super + p
#    ~/.wm/scripts/i3blur.sh

super + Return
    elisp '(ns/spawn-terminal)' || $TERMINAL

super + o
    $BROWSER

# selecterino
super + {_,shift,alt} + space
    action='{switcher,run,pass} '; \
    export GTK_THEME=$(theme getval GTK_THEME); \
    dmenu_$action "$action"

super + grave
     player.sh toggle

XF86Audio{Prev,Next,Play}
     mpc -q {prev,next,toggle}

XF86Audio{LowerVolume,RaiseVolume}
    ponymix {decrease,increase} 5; notify-send --urgency=low "Volume: $(ponymix get-volume)"

super + Escape
    notify-send "reloading sxhkd!"; pkill -USR1 -x sxhkd

# from here down are keys that I'm treating like macro keys

# mute toggle
XF86AudioMute
    ponymix toggle

Pause
    ponymix toggle

# pretend +
super + {minus,equal}
    ponymix {decrease,increase} 5; notify-send --urgency=low "Volume: $(ponymix get-volume)"

super + shift + {minus,equal}
    xbright {down,up}; notify-send --urgency=low "Brightness: $(cat /tmp/xbrightness)"

XF86MonBrightness{Down,Up}
    xbright {down,up}; notify-send --urgency=low "Brightness: $(cat /tmp/xbrightness)"

# you are already using comma and period for window children lol
# < > `
# super + {comma,period,grave}
#     player.sh {prev,next,toggle}

# F9
#     sh -c "$(. $HOME/.profile && shot)"

F8
    utf8
# }}}
